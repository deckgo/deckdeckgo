/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface DeckgoHr {
    }
    interface DeckgoReveal {
        "hide": () => Promise<void>;
        "hideAll": () => Promise<void>;
        "reveal": () => Promise<void>;
        "revealAll": () => Promise<void>;
        "revealProgress": 'start' | 'partial' | 'end';
    }
    interface DeckgoRevealList {
        "hide": () => Promise<void>;
        "hideAll": () => Promise<void>;
        "listTag": string;
        "reveal": () => Promise<void>;
        "revealAll": () => Promise<void>;
        "revealProgress": 'start' | 'partial' | 'end';
    }
    interface DeckgoSocial {
        /**
          * Your Dev username. It will be concatenated automatically with https://dev.to/
         */
        "dev": string;
        /**
          * In case you would like to provide the URI of your choice
         */
        "fullUrl": string;
        /**
          * Your Github username. It will be concatenated automatically with https://github.com/
         */
        "github": string;
        "lazyLoadContent": () => Promise<void>;
        /**
          * Your Linkedin username. It will be concatenated automatically with https://www.linkedin.com/in/
         */
        "linkedin": string;
        /**
          * Your Medium username. username will be replaced automatically from https://username.medium.com/
         */
        "medium": string;
        /**
          * Your Twitter username. It will be concatenated automatically with https://twitter.com/
         */
        "twitter": string;
    }
    interface DeckgoYoutube {
        /**
          * Allow option to toggle video in full screen
         */
        "allowFullscreen": boolean;
        /**
          * A title for the frame, could be use for accessibility reason
         */
        "frameTitle": string;
        /**
          * The height of the video player
         */
        "height": number;
        /**
          * In case you would like to load the video as soon as the component is loaded
         */
        "instant": boolean;
        /**
          * Lazy load the video
         */
        "lazyLoadContent": () => Promise<void>;
        /**
          * Pause the video
         */
        "pause": () => Promise<void>;
        /**
          * Play the video
         */
        "play": () => Promise<void>;
        /**
          * The source url, the YouTube url, of the video. Not embeddable url will be automatically converted to embeddable url supported by YouTube
         */
        "src": string;
        /**
          * Update the iFrame, the video, size
          * @param width
          * @param height
         */
        "updateIFrame": (width: number, height: number) => Promise<void>;
        /**
          * The width of the video player
         */
        "width": number;
    }
}
declare global {
    interface HTMLDeckgoHrElement extends Components.DeckgoHr, HTMLStencilElement {
    }
    var HTMLDeckgoHrElement: {
        prototype: HTMLDeckgoHrElement;
        new (): HTMLDeckgoHrElement;
    };
    interface HTMLDeckgoRevealElement extends Components.DeckgoReveal, HTMLStencilElement {
    }
    var HTMLDeckgoRevealElement: {
        prototype: HTMLDeckgoRevealElement;
        new (): HTMLDeckgoRevealElement;
    };
    interface HTMLDeckgoRevealListElement extends Components.DeckgoRevealList, HTMLStencilElement {
    }
    var HTMLDeckgoRevealListElement: {
        prototype: HTMLDeckgoRevealListElement;
        new (): HTMLDeckgoRevealListElement;
    };
    interface HTMLDeckgoSocialElement extends Components.DeckgoSocial, HTMLStencilElement {
    }
    var HTMLDeckgoSocialElement: {
        prototype: HTMLDeckgoSocialElement;
        new (): HTMLDeckgoSocialElement;
    };
    interface HTMLDeckgoYoutubeElement extends Components.DeckgoYoutube, HTMLStencilElement {
    }
    var HTMLDeckgoYoutubeElement: {
        prototype: HTMLDeckgoYoutubeElement;
        new (): HTMLDeckgoYoutubeElement;
    };
    interface HTMLElementTagNameMap {
        "deckgo-hr": HTMLDeckgoHrElement;
        "deckgo-reveal": HTMLDeckgoRevealElement;
        "deckgo-reveal-list": HTMLDeckgoRevealListElement;
        "deckgo-social": HTMLDeckgoSocialElement;
        "deckgo-youtube": HTMLDeckgoYoutubeElement;
    }
}
declare namespace LocalJSX {
    interface DeckgoHr {
    }
    interface DeckgoReveal {
        "revealProgress"?: 'start' | 'partial' | 'end';
    }
    interface DeckgoRevealList {
        "listTag"?: string;
        "revealProgress"?: 'start' | 'partial' | 'end';
    }
    interface DeckgoSocial {
        /**
          * Your Dev username. It will be concatenated automatically with https://dev.to/
         */
        "dev"?: string;
        /**
          * In case you would like to provide the URI of your choice
         */
        "fullUrl"?: string;
        /**
          * Your Github username. It will be concatenated automatically with https://github.com/
         */
        "github"?: string;
        /**
          * Your Linkedin username. It will be concatenated automatically with https://www.linkedin.com/in/
         */
        "linkedin"?: string;
        /**
          * Your Medium username. username will be replaced automatically from https://username.medium.com/
         */
        "medium"?: string;
        /**
          * Your Twitter username. It will be concatenated automatically with https://twitter.com/
         */
        "twitter"?: string;
    }
    interface DeckgoYoutube {
        /**
          * Allow option to toggle video in full screen
         */
        "allowFullscreen"?: boolean;
        /**
          * A title for the frame, could be use for accessibility reason
         */
        "frameTitle"?: string;
        /**
          * The height of the video player
         */
        "height"?: number;
        /**
          * In case you would like to load the video as soon as the component is loaded
         */
        "instant"?: boolean;
        /**
          * The source url, the YouTube url, of the video. Not embeddable url will be automatically converted to embeddable url supported by YouTube
         */
        "src"?: string;
        /**
          * The width of the video player
         */
        "width"?: number;
    }
    interface IntrinsicElements {
        "deckgo-hr": DeckgoHr;
        "deckgo-reveal": DeckgoReveal;
        "deckgo-reveal-list": DeckgoRevealList;
        "deckgo-social": DeckgoSocial;
        "deckgo-youtube": DeckgoYoutube;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "deckgo-hr": LocalJSX.DeckgoHr & JSXBase.HTMLAttributes<HTMLDeckgoHrElement>;
            "deckgo-reveal": LocalJSX.DeckgoReveal & JSXBase.HTMLAttributes<HTMLDeckgoRevealElement>;
            "deckgo-reveal-list": LocalJSX.DeckgoRevealList & JSXBase.HTMLAttributes<HTMLDeckgoRevealListElement>;
            "deckgo-social": LocalJSX.DeckgoSocial & JSXBase.HTMLAttributes<HTMLDeckgoSocialElement>;
            "deckgo-youtube": LocalJSX.DeckgoYoutube & JSXBase.HTMLAttributes<HTMLDeckgoYoutubeElement>;
        }
    }
}
