/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface DeckgoGif {
        "alt": string;
        "fullscreen": boolean;
        "lazyLoadContent": () => Promise<void>;
        "src": string;
    }
    interface DeckgoSlideGif {
        "afterSwipe": () => Promise<void>;
        /**
          * An alternate text for the Gif
         */
        "alt": string;
        "beforeSwipe": (_enter: boolean, _reveal: boolean) => Promise<boolean>;
        /**
          * If you provide actions for the all deck but, a specific one for this slide, set this option to true
         */
        "customActions": boolean;
        /**
          * If you define a background for the all deck but, a specific one for this slide, set this option to true
         */
        "customBackground": boolean;
        /**
          * If set to true, the GIF width and height will be related to the slide width and height respectively will be fullscreen.
         */
        "fullscreen": boolean;
        "hideContent": () => Promise<void>;
        "lazyLoadContent": () => Promise<void>;
        "revealContent": () => Promise<void>;
        /**
          * The src (url) of the Gif
         */
        "src": string;
    }
}
declare global {
    interface HTMLDeckgoGifElement extends Components.DeckgoGif, HTMLStencilElement {
    }
    var HTMLDeckgoGifElement: {
        prototype: HTMLDeckgoGifElement;
        new (): HTMLDeckgoGifElement;
    };
    interface HTMLDeckgoSlideGifElement extends Components.DeckgoSlideGif, HTMLStencilElement {
    }
    var HTMLDeckgoSlideGifElement: {
        prototype: HTMLDeckgoSlideGifElement;
        new (): HTMLDeckgoSlideGifElement;
    };
    interface HTMLElementTagNameMap {
        "deckgo-gif": HTMLDeckgoGifElement;
        "deckgo-slide-gif": HTMLDeckgoSlideGifElement;
    }
}
declare namespace LocalJSX {
    interface DeckgoGif {
        "alt"?: string;
        "fullscreen"?: boolean;
        "onGifLoaded"?: (event: CustomEvent<boolean>) => void;
        "src"?: string;
    }
    interface DeckgoSlideGif {
        /**
          * An alternate text for the Gif
         */
        "alt"?: string;
        /**
          * If you provide actions for the all deck but, a specific one for this slide, set this option to true
         */
        "customActions"?: boolean;
        /**
          * If you define a background for the all deck but, a specific one for this slide, set this option to true
         */
        "customBackground"?: boolean;
        /**
          * If set to true, the GIF width and height will be related to the slide width and height respectively will be fullscreen.
         */
        "fullscreen"?: boolean;
        /**
          * Triggered when the slide is loaded
         */
        "onSlideDidLoad"?: (event: CustomEvent<void>) => void;
        /**
          * The src (url) of the Gif
         */
        "src"?: string;
    }
    interface IntrinsicElements {
        "deckgo-gif": DeckgoGif;
        "deckgo-slide-gif": DeckgoSlideGif;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "deckgo-gif": LocalJSX.DeckgoGif & JSXBase.HTMLAttributes<HTMLDeckgoGifElement>;
            "deckgo-slide-gif": LocalJSX.DeckgoSlideGif & JSXBase.HTMLAttributes<HTMLDeckgoSlideGifElement>;
        }
    }
}
