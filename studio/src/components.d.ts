/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { EventEmitter, JSX } from "@stencil/core";
import { BreadcrumbsStep } from "./app/utils/editor/breadcrumbs-type";
import { PrismLanguage } from "./app/services/editor/prism/prism.service";
import { InitStyleColor } from "./app/utils/editor/color.utils";
import { Deck } from "./app/models/data/deck";
import { DeckDashboardCloneResult } from "./app/services/dashboard/deck/deck-dashboard.service";
import { DeckAction } from "./app/utils/editor/deck-action";
import { EditAction } from "./app/utils/editor/edit-action";
import { ImageHelper } from "./app/helpers/editor/image.helper";
import { ImageAction } from "./app/utils/editor/image-action";
import { SlotType } from "./app/utils/editor/slot-type";
import { TargetElement } from "./app/utils/editor/target-element";
import { MoreAction } from "./app/utils/editor/more-action";
import { ItemReorderEventDetail } from "@ionic/core";
export namespace Components {
    interface AppAbout {
    }
    interface AppActionBusy {
        "iconSrc": string;
    }
    interface AppActionHelp {
        "link": boolean;
    }
    interface AppActionShare {
    }
    interface AppActionsDeck {
        "actionPublish": EventEmitter;
        "addSlide": EventEmitter;
        "animatePrevNextSlide": EventEmitter;
        "blockSlide": EventEmitter;
        "deckDidChange": EventEmitter;
        "fullscreen": boolean;
        "signIn": EventEmitter;
        "slideTo": EventEmitter;
        "slides": JSX.IntrinsicElements[];
        "toggleFullScreen": EventEmitter;
    }
    interface AppActionsEditor {
        "fullscreen": boolean;
        "hide": () => Promise<void>;
        "hideFooter": boolean;
        "selectDeck": () => Promise<void>;
        "slides": JSX.IntrinsicElements[];
        "touch": (element: HTMLElement, autoOpen?: boolean) => Promise<void>;
    }
    interface AppActionsElement {
        "blurSelectedElement": () => Promise<void>;
        "elementFocus": EventEmitter;
        "reset": () => Promise<void>;
        "slideCopy": EventEmitter;
        "touch": (element: HTMLElement, autoOpen?: boolean) => Promise<void>;
        "unSelect": () => Promise<void>;
    }
    interface AppAlign {
        "selectedElement": HTMLElement;
    }
    interface AppAvatar {
        "ariaLabel": string;
        "src": string;
    }
    interface AppBoxShadow {
        "selectedElement": HTMLElement;
    }
    interface AppBreadcrumbs {
        "step": BreadcrumbsStep;
    }
    interface AppCode {
        "codeDidChange": EventEmitter<HTMLElement>;
        "selectedElement": HTMLElement;
    }
    interface AppCodeLanguages {
        "codeDidChange": EventEmitter<HTMLElement>;
        "currentLanguage": PrismLanguage | undefined;
        "selectedElement": HTMLElement;
    }
    interface AppColorChart {
        "initCurrentColors": () => Promise<void>;
        "moreColors": boolean;
        "selectedElement": HTMLElement;
    }
    interface AppColorCode {
        "moreColors": boolean;
        "selectedElement": HTMLElement;
    }
    interface AppColorQrcode {
        "initCurrentColors": () => Promise<void>;
        "moreColors": boolean;
        "selectedElement": HTMLElement;
    }
    interface AppColorSides {
        "initCurrentColors": () => Promise<void>;
        "moreColors": boolean;
        "selectedElement": HTMLElement;
        "template": 'split' | 'author';
    }
    interface AppColorTextBackground {
        "colorType": 'text' | 'background';
        "deck": boolean;
        "expander": boolean;
        "initCurrentColors": () => Promise<void>;
        "moreColors": boolean;
        "selectedElement": HTMLElement;
        "slide": boolean;
    }
    interface AppContact {
    }
    interface AppContactForm {
    }
    interface AppContrastInfo {
    }
    interface AppCreateSlide {
    }
    interface AppCustomData {
    }
    interface AppCustomImages {
    }
    interface AppDashboard {
    }
    interface AppDashboardDeckActions {
        "deck": Deck;
    }
    interface AppDeckDelete {
        "deckName": string;
        "published": string;
    }
    interface AppDeckFonts {
        "deckElement": HTMLElement;
        "moreColors": boolean;
    }
    interface AppDeckHeaderFooter {
        "deckDidChange": EventEmitter<HTMLElement>;
        "deckElement": HTMLElement;
    }
    interface AppDeckStyle {
        "blockSlide": EventEmitter<boolean>;
        "deckDidChange": EventEmitter<HTMLElement>;
        "signIn": EventEmitter<void>;
    }
    interface AppDeckTransition {
        "deckElement": HTMLElement;
    }
    interface AppDemo {
        "selectedElement": HTMLElement;
    }
    interface AppDeveloper {
    }
    interface AppDiscover {
    }
    interface AppEditSlide {
        "author": boolean;
        "chart": boolean;
        "qrCode": boolean;
        "selectedElement": HTMLElement;
        "slideDidChange": EventEmitter<HTMLElement>;
    }
    interface AppEditSlideAuthor {
        "selectedElement": HTMLElement;
        "slideDidChange": EventEmitter<HTMLElement>;
    }
    interface AppEditSlideChart {
        "selectedElement": HTMLElement;
        "slideDidChange": EventEmitter<HTMLElement>;
    }
    interface AppEditSlideQrcode {
        "selectedElement": HTMLElement;
        "slideDidChange": EventEmitter<HTMLElement>;
    }
    interface AppEditor {
        "deckId": string;
    }
    interface AppElementDelete {
    }
    interface AppElementStyle {
        "code": boolean;
        "image": boolean;
        "imageHelper": ImageHelper;
        "imgDidChange": EventEmitter<HTMLElement>;
        "math": boolean;
        "selectedElement": HTMLElement;
        "shape": 'shape' | 'text' | undefined;
        "slide": boolean;
    }
    interface AppEmbed {
    }
    interface AppEnterprise {
    }
    interface AppExpansionPanel {
        "expanded": 'open' | 'close';
        "expander": boolean;
    }
    interface AppFaq {
    }
    interface AppFeatures {
    }
    interface AppFeed {
    }
    interface AppFeedCard {
        "compact": boolean;
        "deck": Deck;
    }
    interface AppFeedCardTags {
        "disableRemove": boolean;
        "editable": boolean;
        "tags": string[];
    }
    interface AppFontSize {
        "selectedElement": HTMLElement;
        "selector": '--deckgo-highlight-code-font-size' | '--deckgo-math-font-size';
    }
    interface AppFooter {
        "display": 'menu' | 'landing';
    }
    interface AppFullscreenInfo {
    }
    interface AppGetHelp {
    }
    interface AppGif {
    }
    interface AppGoOffline {
    }
    interface AppGoOnline {
    }
    interface AppHome {
    }
    interface AppImage {
        "deck": boolean;
        "deleteBackground": boolean;
        "expander": boolean;
        "selectedElement": HTMLElement;
        "slide": boolean;
    }
    interface AppImageColumns {
        "imagesEven": (UnsplashPhoto | TenorGif | StorageFile)[];
        "imagesOdd": (UnsplashPhoto | TenorGif | StorageFile)[];
    }
    interface AppImageElement {
        "selectedElement": HTMLElement;
        "slide": boolean;
    }
    interface AppImageStyle {
        "selectedElement": HTMLElement;
    }
    interface AppInactivity {
        "fullscreen": boolean;
    }
    interface AppLanding {
    }
    interface AppLandingContent {
    }
    interface AppLandingDeck {
    }
    interface AppList {
        "selectedElement": HTMLElement;
    }
    interface AppLogo {
    }
    interface AppMath {
        "mathDidChange": EventEmitter<HTMLElement>;
        "selectedElement": HTMLElement;
    }
    interface AppMenu {
    }
    interface AppMoreDeckActions {
        "offline": boolean;
    }
    interface AppMoreElementActions {
        "copy": boolean;
        "images": boolean;
        "notes": boolean;
    }
    interface AppMoreShareOptions {
    }
    interface AppNavigation {
        "menuToggle": boolean;
        "presentation": boolean;
        "publish": boolean;
        "user": boolean;
    }
    interface AppNavigationActions {
        "presentation": boolean;
        "publish": boolean;
        "signIn": boolean;
    }
    interface AppNewsletter {
    }
    interface AppNotes {
        "selectedElement": HTMLElement;
    }
    interface AppOffline {
        "offline": boolean;
    }
    interface AppOpensource {
    }
    interface AppPhoto {
    }
    interface AppPlayground {
        "selectedElement": HTMLElement;
    }
    interface AppPlaygroundPlaceholder {
    }
    interface AppPoll {
        "pollKey": string;
    }
    interface AppPollOptions {
        "selectedElement": HTMLElement;
        "slideDidChange": EventEmitter<HTMLElement>;
    }
    interface AppPopular {
        "description": boolean;
        "help": boolean;
    }
    interface AppPress {
    }
    interface AppPrivacy {
    }
    interface AppPublish {
    }
    interface AppPublishDone {
        "publishedUrl": string;
    }
    interface AppPublishEdit {
    }
    interface AppRandomGif {
        "keyword": string;
    }
    interface AppRemote {
    }
    interface AppRemoteConnect {
    }
    interface AppRemoteRequest {
    }
    interface AppReveal {
        "selectedElement": HTMLElement;
    }
    interface AppRoot {
    }
    interface AppSectionFooter {
        "action": boolean;
    }
    interface AppSelectTargetElement {
        "background": boolean;
        "chart": boolean;
        "code": boolean;
        "headerFooter": boolean;
        "image": boolean;
        "qrCode": boolean;
        "shape": boolean;
        "sides": boolean;
        "slide": boolean;
        "textTarget": boolean;
        "transition": boolean;
    }
    interface AppServices {
    }
    interface AppSettings {
    }
    interface AppShape {
        "selectedElement": HTMLElement;
    }
    interface AppShareDeck {
        "openShare": () => Promise<void>;
    }
    interface AppShareOptions {
    }
    interface AppSignin {
        "redirect": string;
        "redirectId": string;
    }
    interface AppSlideContrast {
    }
    interface AppSlideNavigate {
    }
    interface AppSlotType {
        "selectedElement": HTMLElement;
    }
    interface AppTeam {
    }
    interface AppTerms {
    }
    interface AppTransform {
        "selectedElement": HTMLElement;
    }
    interface AppUserDelete {
        "username": string;
    }
    interface AppUserInfo {
        "avatarColSize": number;
    }
    interface AppUserMenu {
    }
    interface AppWelcome {
    }
    interface AppYoutube {
        "selectedElement": HTMLElement;
    }
}
declare global {
    interface HTMLAppAboutElement extends Components.AppAbout, HTMLStencilElement {
    }
    var HTMLAppAboutElement: {
        prototype: HTMLAppAboutElement;
        new (): HTMLAppAboutElement;
    };
    interface HTMLAppActionBusyElement extends Components.AppActionBusy, HTMLStencilElement {
    }
    var HTMLAppActionBusyElement: {
        prototype: HTMLAppActionBusyElement;
        new (): HTMLAppActionBusyElement;
    };
    interface HTMLAppActionHelpElement extends Components.AppActionHelp, HTMLStencilElement {
    }
    var HTMLAppActionHelpElement: {
        prototype: HTMLAppActionHelpElement;
        new (): HTMLAppActionHelpElement;
    };
    interface HTMLAppActionShareElement extends Components.AppActionShare, HTMLStencilElement {
    }
    var HTMLAppActionShareElement: {
        prototype: HTMLAppActionShareElement;
        new (): HTMLAppActionShareElement;
    };
    interface HTMLAppActionsDeckElement extends Components.AppActionsDeck, HTMLStencilElement {
    }
    var HTMLAppActionsDeckElement: {
        prototype: HTMLAppActionsDeckElement;
        new (): HTMLAppActionsDeckElement;
    };
    interface HTMLAppActionsEditorElement extends Components.AppActionsEditor, HTMLStencilElement {
    }
    var HTMLAppActionsEditorElement: {
        prototype: HTMLAppActionsEditorElement;
        new (): HTMLAppActionsEditorElement;
    };
    interface HTMLAppActionsElementElement extends Components.AppActionsElement, HTMLStencilElement {
    }
    var HTMLAppActionsElementElement: {
        prototype: HTMLAppActionsElementElement;
        new (): HTMLAppActionsElementElement;
    };
    interface HTMLAppAlignElement extends Components.AppAlign, HTMLStencilElement {
    }
    var HTMLAppAlignElement: {
        prototype: HTMLAppAlignElement;
        new (): HTMLAppAlignElement;
    };
    interface HTMLAppAvatarElement extends Components.AppAvatar, HTMLStencilElement {
    }
    var HTMLAppAvatarElement: {
        prototype: HTMLAppAvatarElement;
        new (): HTMLAppAvatarElement;
    };
    interface HTMLAppBoxShadowElement extends Components.AppBoxShadow, HTMLStencilElement {
    }
    var HTMLAppBoxShadowElement: {
        prototype: HTMLAppBoxShadowElement;
        new (): HTMLAppBoxShadowElement;
    };
    interface HTMLAppBreadcrumbsElement extends Components.AppBreadcrumbs, HTMLStencilElement {
    }
    var HTMLAppBreadcrumbsElement: {
        prototype: HTMLAppBreadcrumbsElement;
        new (): HTMLAppBreadcrumbsElement;
    };
    interface HTMLAppCodeElement extends Components.AppCode, HTMLStencilElement {
    }
    var HTMLAppCodeElement: {
        prototype: HTMLAppCodeElement;
        new (): HTMLAppCodeElement;
    };
    interface HTMLAppCodeLanguagesElement extends Components.AppCodeLanguages, HTMLStencilElement {
    }
    var HTMLAppCodeLanguagesElement: {
        prototype: HTMLAppCodeLanguagesElement;
        new (): HTMLAppCodeLanguagesElement;
    };
    interface HTMLAppColorChartElement extends Components.AppColorChart, HTMLStencilElement {
    }
    var HTMLAppColorChartElement: {
        prototype: HTMLAppColorChartElement;
        new (): HTMLAppColorChartElement;
    };
    interface HTMLAppColorCodeElement extends Components.AppColorCode, HTMLStencilElement {
    }
    var HTMLAppColorCodeElement: {
        prototype: HTMLAppColorCodeElement;
        new (): HTMLAppColorCodeElement;
    };
    interface HTMLAppColorQrcodeElement extends Components.AppColorQrcode, HTMLStencilElement {
    }
    var HTMLAppColorQrcodeElement: {
        prototype: HTMLAppColorQrcodeElement;
        new (): HTMLAppColorQrcodeElement;
    };
    interface HTMLAppColorSidesElement extends Components.AppColorSides, HTMLStencilElement {
    }
    var HTMLAppColorSidesElement: {
        prototype: HTMLAppColorSidesElement;
        new (): HTMLAppColorSidesElement;
    };
    interface HTMLAppColorTextBackgroundElement extends Components.AppColorTextBackground, HTMLStencilElement {
    }
    var HTMLAppColorTextBackgroundElement: {
        prototype: HTMLAppColorTextBackgroundElement;
        new (): HTMLAppColorTextBackgroundElement;
    };
    interface HTMLAppContactElement extends Components.AppContact, HTMLStencilElement {
    }
    var HTMLAppContactElement: {
        prototype: HTMLAppContactElement;
        new (): HTMLAppContactElement;
    };
    interface HTMLAppContactFormElement extends Components.AppContactForm, HTMLStencilElement {
    }
    var HTMLAppContactFormElement: {
        prototype: HTMLAppContactFormElement;
        new (): HTMLAppContactFormElement;
    };
    interface HTMLAppContrastInfoElement extends Components.AppContrastInfo, HTMLStencilElement {
    }
    var HTMLAppContrastInfoElement: {
        prototype: HTMLAppContrastInfoElement;
        new (): HTMLAppContrastInfoElement;
    };
    interface HTMLAppCreateSlideElement extends Components.AppCreateSlide, HTMLStencilElement {
    }
    var HTMLAppCreateSlideElement: {
        prototype: HTMLAppCreateSlideElement;
        new (): HTMLAppCreateSlideElement;
    };
    interface HTMLAppCustomDataElement extends Components.AppCustomData, HTMLStencilElement {
    }
    var HTMLAppCustomDataElement: {
        prototype: HTMLAppCustomDataElement;
        new (): HTMLAppCustomDataElement;
    };
    interface HTMLAppCustomImagesElement extends Components.AppCustomImages, HTMLStencilElement {
    }
    var HTMLAppCustomImagesElement: {
        prototype: HTMLAppCustomImagesElement;
        new (): HTMLAppCustomImagesElement;
    };
    interface HTMLAppDashboardElement extends Components.AppDashboard, HTMLStencilElement {
    }
    var HTMLAppDashboardElement: {
        prototype: HTMLAppDashboardElement;
        new (): HTMLAppDashboardElement;
    };
    interface HTMLAppDashboardDeckActionsElement extends Components.AppDashboardDeckActions, HTMLStencilElement {
    }
    var HTMLAppDashboardDeckActionsElement: {
        prototype: HTMLAppDashboardDeckActionsElement;
        new (): HTMLAppDashboardDeckActionsElement;
    };
    interface HTMLAppDeckDeleteElement extends Components.AppDeckDelete, HTMLStencilElement {
    }
    var HTMLAppDeckDeleteElement: {
        prototype: HTMLAppDeckDeleteElement;
        new (): HTMLAppDeckDeleteElement;
    };
    interface HTMLAppDeckFontsElement extends Components.AppDeckFonts, HTMLStencilElement {
    }
    var HTMLAppDeckFontsElement: {
        prototype: HTMLAppDeckFontsElement;
        new (): HTMLAppDeckFontsElement;
    };
    interface HTMLAppDeckHeaderFooterElement extends Components.AppDeckHeaderFooter, HTMLStencilElement {
    }
    var HTMLAppDeckHeaderFooterElement: {
        prototype: HTMLAppDeckHeaderFooterElement;
        new (): HTMLAppDeckHeaderFooterElement;
    };
    interface HTMLAppDeckStyleElement extends Components.AppDeckStyle, HTMLStencilElement {
    }
    var HTMLAppDeckStyleElement: {
        prototype: HTMLAppDeckStyleElement;
        new (): HTMLAppDeckStyleElement;
    };
    interface HTMLAppDeckTransitionElement extends Components.AppDeckTransition, HTMLStencilElement {
    }
    var HTMLAppDeckTransitionElement: {
        prototype: HTMLAppDeckTransitionElement;
        new (): HTMLAppDeckTransitionElement;
    };
    interface HTMLAppDemoElement extends Components.AppDemo, HTMLStencilElement {
    }
    var HTMLAppDemoElement: {
        prototype: HTMLAppDemoElement;
        new (): HTMLAppDemoElement;
    };
    interface HTMLAppDeveloperElement extends Components.AppDeveloper, HTMLStencilElement {
    }
    var HTMLAppDeveloperElement: {
        prototype: HTMLAppDeveloperElement;
        new (): HTMLAppDeveloperElement;
    };
    interface HTMLAppDiscoverElement extends Components.AppDiscover, HTMLStencilElement {
    }
    var HTMLAppDiscoverElement: {
        prototype: HTMLAppDiscoverElement;
        new (): HTMLAppDiscoverElement;
    };
    interface HTMLAppEditSlideElement extends Components.AppEditSlide, HTMLStencilElement {
    }
    var HTMLAppEditSlideElement: {
        prototype: HTMLAppEditSlideElement;
        new (): HTMLAppEditSlideElement;
    };
    interface HTMLAppEditSlideAuthorElement extends Components.AppEditSlideAuthor, HTMLStencilElement {
    }
    var HTMLAppEditSlideAuthorElement: {
        prototype: HTMLAppEditSlideAuthorElement;
        new (): HTMLAppEditSlideAuthorElement;
    };
    interface HTMLAppEditSlideChartElement extends Components.AppEditSlideChart, HTMLStencilElement {
    }
    var HTMLAppEditSlideChartElement: {
        prototype: HTMLAppEditSlideChartElement;
        new (): HTMLAppEditSlideChartElement;
    };
    interface HTMLAppEditSlideQrcodeElement extends Components.AppEditSlideQrcode, HTMLStencilElement {
    }
    var HTMLAppEditSlideQrcodeElement: {
        prototype: HTMLAppEditSlideQrcodeElement;
        new (): HTMLAppEditSlideQrcodeElement;
    };
    interface HTMLAppEditorElement extends Components.AppEditor, HTMLStencilElement {
    }
    var HTMLAppEditorElement: {
        prototype: HTMLAppEditorElement;
        new (): HTMLAppEditorElement;
    };
    interface HTMLAppElementDeleteElement extends Components.AppElementDelete, HTMLStencilElement {
    }
    var HTMLAppElementDeleteElement: {
        prototype: HTMLAppElementDeleteElement;
        new (): HTMLAppElementDeleteElement;
    };
    interface HTMLAppElementStyleElement extends Components.AppElementStyle, HTMLStencilElement {
    }
    var HTMLAppElementStyleElement: {
        prototype: HTMLAppElementStyleElement;
        new (): HTMLAppElementStyleElement;
    };
    interface HTMLAppEmbedElement extends Components.AppEmbed, HTMLStencilElement {
    }
    var HTMLAppEmbedElement: {
        prototype: HTMLAppEmbedElement;
        new (): HTMLAppEmbedElement;
    };
    interface HTMLAppEnterpriseElement extends Components.AppEnterprise, HTMLStencilElement {
    }
    var HTMLAppEnterpriseElement: {
        prototype: HTMLAppEnterpriseElement;
        new (): HTMLAppEnterpriseElement;
    };
    interface HTMLAppExpansionPanelElement extends Components.AppExpansionPanel, HTMLStencilElement {
    }
    var HTMLAppExpansionPanelElement: {
        prototype: HTMLAppExpansionPanelElement;
        new (): HTMLAppExpansionPanelElement;
    };
    interface HTMLAppFaqElement extends Components.AppFaq, HTMLStencilElement {
    }
    var HTMLAppFaqElement: {
        prototype: HTMLAppFaqElement;
        new (): HTMLAppFaqElement;
    };
    interface HTMLAppFeaturesElement extends Components.AppFeatures, HTMLStencilElement {
    }
    var HTMLAppFeaturesElement: {
        prototype: HTMLAppFeaturesElement;
        new (): HTMLAppFeaturesElement;
    };
    interface HTMLAppFeedElement extends Components.AppFeed, HTMLStencilElement {
    }
    var HTMLAppFeedElement: {
        prototype: HTMLAppFeedElement;
        new (): HTMLAppFeedElement;
    };
    interface HTMLAppFeedCardElement extends Components.AppFeedCard, HTMLStencilElement {
    }
    var HTMLAppFeedCardElement: {
        prototype: HTMLAppFeedCardElement;
        new (): HTMLAppFeedCardElement;
    };
    interface HTMLAppFeedCardTagsElement extends Components.AppFeedCardTags, HTMLStencilElement {
    }
    var HTMLAppFeedCardTagsElement: {
        prototype: HTMLAppFeedCardTagsElement;
        new (): HTMLAppFeedCardTagsElement;
    };
    interface HTMLAppFontSizeElement extends Components.AppFontSize, HTMLStencilElement {
    }
    var HTMLAppFontSizeElement: {
        prototype: HTMLAppFontSizeElement;
        new (): HTMLAppFontSizeElement;
    };
    interface HTMLAppFooterElement extends Components.AppFooter, HTMLStencilElement {
    }
    var HTMLAppFooterElement: {
        prototype: HTMLAppFooterElement;
        new (): HTMLAppFooterElement;
    };
    interface HTMLAppFullscreenInfoElement extends Components.AppFullscreenInfo, HTMLStencilElement {
    }
    var HTMLAppFullscreenInfoElement: {
        prototype: HTMLAppFullscreenInfoElement;
        new (): HTMLAppFullscreenInfoElement;
    };
    interface HTMLAppGetHelpElement extends Components.AppGetHelp, HTMLStencilElement {
    }
    var HTMLAppGetHelpElement: {
        prototype: HTMLAppGetHelpElement;
        new (): HTMLAppGetHelpElement;
    };
    interface HTMLAppGifElement extends Components.AppGif, HTMLStencilElement {
    }
    var HTMLAppGifElement: {
        prototype: HTMLAppGifElement;
        new (): HTMLAppGifElement;
    };
    interface HTMLAppGoOfflineElement extends Components.AppGoOffline, HTMLStencilElement {
    }
    var HTMLAppGoOfflineElement: {
        prototype: HTMLAppGoOfflineElement;
        new (): HTMLAppGoOfflineElement;
    };
    interface HTMLAppGoOnlineElement extends Components.AppGoOnline, HTMLStencilElement {
    }
    var HTMLAppGoOnlineElement: {
        prototype: HTMLAppGoOnlineElement;
        new (): HTMLAppGoOnlineElement;
    };
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppImageElement extends Components.AppImage, HTMLStencilElement {
    }
    var HTMLAppImageElement: {
        prototype: HTMLAppImageElement;
        new (): HTMLAppImageElement;
    };
    interface HTMLAppImageColumnsElement extends Components.AppImageColumns, HTMLStencilElement {
    }
    var HTMLAppImageColumnsElement: {
        prototype: HTMLAppImageColumnsElement;
        new (): HTMLAppImageColumnsElement;
    };
    interface HTMLAppImageElementElement extends Components.AppImageElement, HTMLStencilElement {
    }
    var HTMLAppImageElementElement: {
        prototype: HTMLAppImageElementElement;
        new (): HTMLAppImageElementElement;
    };
    interface HTMLAppImageStyleElement extends Components.AppImageStyle, HTMLStencilElement {
    }
    var HTMLAppImageStyleElement: {
        prototype: HTMLAppImageStyleElement;
        new (): HTMLAppImageStyleElement;
    };
    interface HTMLAppInactivityElement extends Components.AppInactivity, HTMLStencilElement {
    }
    var HTMLAppInactivityElement: {
        prototype: HTMLAppInactivityElement;
        new (): HTMLAppInactivityElement;
    };
    interface HTMLAppLandingElement extends Components.AppLanding, HTMLStencilElement {
    }
    var HTMLAppLandingElement: {
        prototype: HTMLAppLandingElement;
        new (): HTMLAppLandingElement;
    };
    interface HTMLAppLandingContentElement extends Components.AppLandingContent, HTMLStencilElement {
    }
    var HTMLAppLandingContentElement: {
        prototype: HTMLAppLandingContentElement;
        new (): HTMLAppLandingContentElement;
    };
    interface HTMLAppLandingDeckElement extends Components.AppLandingDeck, HTMLStencilElement {
    }
    var HTMLAppLandingDeckElement: {
        prototype: HTMLAppLandingDeckElement;
        new (): HTMLAppLandingDeckElement;
    };
    interface HTMLAppListElement extends Components.AppList, HTMLStencilElement {
    }
    var HTMLAppListElement: {
        prototype: HTMLAppListElement;
        new (): HTMLAppListElement;
    };
    interface HTMLAppLogoElement extends Components.AppLogo, HTMLStencilElement {
    }
    var HTMLAppLogoElement: {
        prototype: HTMLAppLogoElement;
        new (): HTMLAppLogoElement;
    };
    interface HTMLAppMathElement extends Components.AppMath, HTMLStencilElement {
    }
    var HTMLAppMathElement: {
        prototype: HTMLAppMathElement;
        new (): HTMLAppMathElement;
    };
    interface HTMLAppMenuElement extends Components.AppMenu, HTMLStencilElement {
    }
    var HTMLAppMenuElement: {
        prototype: HTMLAppMenuElement;
        new (): HTMLAppMenuElement;
    };
    interface HTMLAppMoreDeckActionsElement extends Components.AppMoreDeckActions, HTMLStencilElement {
    }
    var HTMLAppMoreDeckActionsElement: {
        prototype: HTMLAppMoreDeckActionsElement;
        new (): HTMLAppMoreDeckActionsElement;
    };
    interface HTMLAppMoreElementActionsElement extends Components.AppMoreElementActions, HTMLStencilElement {
    }
    var HTMLAppMoreElementActionsElement: {
        prototype: HTMLAppMoreElementActionsElement;
        new (): HTMLAppMoreElementActionsElement;
    };
    interface HTMLAppMoreShareOptionsElement extends Components.AppMoreShareOptions, HTMLStencilElement {
    }
    var HTMLAppMoreShareOptionsElement: {
        prototype: HTMLAppMoreShareOptionsElement;
        new (): HTMLAppMoreShareOptionsElement;
    };
    interface HTMLAppNavigationElement extends Components.AppNavigation, HTMLStencilElement {
    }
    var HTMLAppNavigationElement: {
        prototype: HTMLAppNavigationElement;
        new (): HTMLAppNavigationElement;
    };
    interface HTMLAppNavigationActionsElement extends Components.AppNavigationActions, HTMLStencilElement {
    }
    var HTMLAppNavigationActionsElement: {
        prototype: HTMLAppNavigationActionsElement;
        new (): HTMLAppNavigationActionsElement;
    };
    interface HTMLAppNewsletterElement extends Components.AppNewsletter, HTMLStencilElement {
    }
    var HTMLAppNewsletterElement: {
        prototype: HTMLAppNewsletterElement;
        new (): HTMLAppNewsletterElement;
    };
    interface HTMLAppNotesElement extends Components.AppNotes, HTMLStencilElement {
    }
    var HTMLAppNotesElement: {
        prototype: HTMLAppNotesElement;
        new (): HTMLAppNotesElement;
    };
    interface HTMLAppOfflineElement extends Components.AppOffline, HTMLStencilElement {
    }
    var HTMLAppOfflineElement: {
        prototype: HTMLAppOfflineElement;
        new (): HTMLAppOfflineElement;
    };
    interface HTMLAppOpensourceElement extends Components.AppOpensource, HTMLStencilElement {
    }
    var HTMLAppOpensourceElement: {
        prototype: HTMLAppOpensourceElement;
        new (): HTMLAppOpensourceElement;
    };
    interface HTMLAppPhotoElement extends Components.AppPhoto, HTMLStencilElement {
    }
    var HTMLAppPhotoElement: {
        prototype: HTMLAppPhotoElement;
        new (): HTMLAppPhotoElement;
    };
    interface HTMLAppPlaygroundElement extends Components.AppPlayground, HTMLStencilElement {
    }
    var HTMLAppPlaygroundElement: {
        prototype: HTMLAppPlaygroundElement;
        new (): HTMLAppPlaygroundElement;
    };
    interface HTMLAppPlaygroundPlaceholderElement extends Components.AppPlaygroundPlaceholder, HTMLStencilElement {
    }
    var HTMLAppPlaygroundPlaceholderElement: {
        prototype: HTMLAppPlaygroundPlaceholderElement;
        new (): HTMLAppPlaygroundPlaceholderElement;
    };
    interface HTMLAppPollElement extends Components.AppPoll, HTMLStencilElement {
    }
    var HTMLAppPollElement: {
        prototype: HTMLAppPollElement;
        new (): HTMLAppPollElement;
    };
    interface HTMLAppPollOptionsElement extends Components.AppPollOptions, HTMLStencilElement {
    }
    var HTMLAppPollOptionsElement: {
        prototype: HTMLAppPollOptionsElement;
        new (): HTMLAppPollOptionsElement;
    };
    interface HTMLAppPopularElement extends Components.AppPopular, HTMLStencilElement {
    }
    var HTMLAppPopularElement: {
        prototype: HTMLAppPopularElement;
        new (): HTMLAppPopularElement;
    };
    interface HTMLAppPressElement extends Components.AppPress, HTMLStencilElement {
    }
    var HTMLAppPressElement: {
        prototype: HTMLAppPressElement;
        new (): HTMLAppPressElement;
    };
    interface HTMLAppPrivacyElement extends Components.AppPrivacy, HTMLStencilElement {
    }
    var HTMLAppPrivacyElement: {
        prototype: HTMLAppPrivacyElement;
        new (): HTMLAppPrivacyElement;
    };
    interface HTMLAppPublishElement extends Components.AppPublish, HTMLStencilElement {
    }
    var HTMLAppPublishElement: {
        prototype: HTMLAppPublishElement;
        new (): HTMLAppPublishElement;
    };
    interface HTMLAppPublishDoneElement extends Components.AppPublishDone, HTMLStencilElement {
    }
    var HTMLAppPublishDoneElement: {
        prototype: HTMLAppPublishDoneElement;
        new (): HTMLAppPublishDoneElement;
    };
    interface HTMLAppPublishEditElement extends Components.AppPublishEdit, HTMLStencilElement {
    }
    var HTMLAppPublishEditElement: {
        prototype: HTMLAppPublishEditElement;
        new (): HTMLAppPublishEditElement;
    };
    interface HTMLAppRandomGifElement extends Components.AppRandomGif, HTMLStencilElement {
    }
    var HTMLAppRandomGifElement: {
        prototype: HTMLAppRandomGifElement;
        new (): HTMLAppRandomGifElement;
    };
    interface HTMLAppRemoteElement extends Components.AppRemote, HTMLStencilElement {
    }
    var HTMLAppRemoteElement: {
        prototype: HTMLAppRemoteElement;
        new (): HTMLAppRemoteElement;
    };
    interface HTMLAppRemoteConnectElement extends Components.AppRemoteConnect, HTMLStencilElement {
    }
    var HTMLAppRemoteConnectElement: {
        prototype: HTMLAppRemoteConnectElement;
        new (): HTMLAppRemoteConnectElement;
    };
    interface HTMLAppRemoteRequestElement extends Components.AppRemoteRequest, HTMLStencilElement {
    }
    var HTMLAppRemoteRequestElement: {
        prototype: HTMLAppRemoteRequestElement;
        new (): HTMLAppRemoteRequestElement;
    };
    interface HTMLAppRevealElement extends Components.AppReveal, HTMLStencilElement {
    }
    var HTMLAppRevealElement: {
        prototype: HTMLAppRevealElement;
        new (): HTMLAppRevealElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLAppSectionFooterElement extends Components.AppSectionFooter, HTMLStencilElement {
    }
    var HTMLAppSectionFooterElement: {
        prototype: HTMLAppSectionFooterElement;
        new (): HTMLAppSectionFooterElement;
    };
    interface HTMLAppSelectTargetElementElement extends Components.AppSelectTargetElement, HTMLStencilElement {
    }
    var HTMLAppSelectTargetElementElement: {
        prototype: HTMLAppSelectTargetElementElement;
        new (): HTMLAppSelectTargetElementElement;
    };
    interface HTMLAppServicesElement extends Components.AppServices, HTMLStencilElement {
    }
    var HTMLAppServicesElement: {
        prototype: HTMLAppServicesElement;
        new (): HTMLAppServicesElement;
    };
    interface HTMLAppSettingsElement extends Components.AppSettings, HTMLStencilElement {
    }
    var HTMLAppSettingsElement: {
        prototype: HTMLAppSettingsElement;
        new (): HTMLAppSettingsElement;
    };
    interface HTMLAppShapeElement extends Components.AppShape, HTMLStencilElement {
    }
    var HTMLAppShapeElement: {
        prototype: HTMLAppShapeElement;
        new (): HTMLAppShapeElement;
    };
    interface HTMLAppShareDeckElement extends Components.AppShareDeck, HTMLStencilElement {
    }
    var HTMLAppShareDeckElement: {
        prototype: HTMLAppShareDeckElement;
        new (): HTMLAppShareDeckElement;
    };
    interface HTMLAppShareOptionsElement extends Components.AppShareOptions, HTMLStencilElement {
    }
    var HTMLAppShareOptionsElement: {
        prototype: HTMLAppShareOptionsElement;
        new (): HTMLAppShareOptionsElement;
    };
    interface HTMLAppSigninElement extends Components.AppSignin, HTMLStencilElement {
    }
    var HTMLAppSigninElement: {
        prototype: HTMLAppSigninElement;
        new (): HTMLAppSigninElement;
    };
    interface HTMLAppSlideContrastElement extends Components.AppSlideContrast, HTMLStencilElement {
    }
    var HTMLAppSlideContrastElement: {
        prototype: HTMLAppSlideContrastElement;
        new (): HTMLAppSlideContrastElement;
    };
    interface HTMLAppSlideNavigateElement extends Components.AppSlideNavigate, HTMLStencilElement {
    }
    var HTMLAppSlideNavigateElement: {
        prototype: HTMLAppSlideNavigateElement;
        new (): HTMLAppSlideNavigateElement;
    };
    interface HTMLAppSlotTypeElement extends Components.AppSlotType, HTMLStencilElement {
    }
    var HTMLAppSlotTypeElement: {
        prototype: HTMLAppSlotTypeElement;
        new (): HTMLAppSlotTypeElement;
    };
    interface HTMLAppTeamElement extends Components.AppTeam, HTMLStencilElement {
    }
    var HTMLAppTeamElement: {
        prototype: HTMLAppTeamElement;
        new (): HTMLAppTeamElement;
    };
    interface HTMLAppTermsElement extends Components.AppTerms, HTMLStencilElement {
    }
    var HTMLAppTermsElement: {
        prototype: HTMLAppTermsElement;
        new (): HTMLAppTermsElement;
    };
    interface HTMLAppTransformElement extends Components.AppTransform, HTMLStencilElement {
    }
    var HTMLAppTransformElement: {
        prototype: HTMLAppTransformElement;
        new (): HTMLAppTransformElement;
    };
    interface HTMLAppUserDeleteElement extends Components.AppUserDelete, HTMLStencilElement {
    }
    var HTMLAppUserDeleteElement: {
        prototype: HTMLAppUserDeleteElement;
        new (): HTMLAppUserDeleteElement;
    };
    interface HTMLAppUserInfoElement extends Components.AppUserInfo, HTMLStencilElement {
    }
    var HTMLAppUserInfoElement: {
        prototype: HTMLAppUserInfoElement;
        new (): HTMLAppUserInfoElement;
    };
    interface HTMLAppUserMenuElement extends Components.AppUserMenu, HTMLStencilElement {
    }
    var HTMLAppUserMenuElement: {
        prototype: HTMLAppUserMenuElement;
        new (): HTMLAppUserMenuElement;
    };
    interface HTMLAppWelcomeElement extends Components.AppWelcome, HTMLStencilElement {
    }
    var HTMLAppWelcomeElement: {
        prototype: HTMLAppWelcomeElement;
        new (): HTMLAppWelcomeElement;
    };
    interface HTMLAppYoutubeElement extends Components.AppYoutube, HTMLStencilElement {
    }
    var HTMLAppYoutubeElement: {
        prototype: HTMLAppYoutubeElement;
        new (): HTMLAppYoutubeElement;
    };
    interface HTMLElementTagNameMap {
        "app-about": HTMLAppAboutElement;
        "app-action-busy": HTMLAppActionBusyElement;
        "app-action-help": HTMLAppActionHelpElement;
        "app-action-share": HTMLAppActionShareElement;
        "app-actions-deck": HTMLAppActionsDeckElement;
        "app-actions-editor": HTMLAppActionsEditorElement;
        "app-actions-element": HTMLAppActionsElementElement;
        "app-align": HTMLAppAlignElement;
        "app-avatar": HTMLAppAvatarElement;
        "app-box-shadow": HTMLAppBoxShadowElement;
        "app-breadcrumbs": HTMLAppBreadcrumbsElement;
        "app-code": HTMLAppCodeElement;
        "app-code-languages": HTMLAppCodeLanguagesElement;
        "app-color-chart": HTMLAppColorChartElement;
        "app-color-code": HTMLAppColorCodeElement;
        "app-color-qrcode": HTMLAppColorQrcodeElement;
        "app-color-sides": HTMLAppColorSidesElement;
        "app-color-text-background": HTMLAppColorTextBackgroundElement;
        "app-contact": HTMLAppContactElement;
        "app-contact-form": HTMLAppContactFormElement;
        "app-contrast-info": HTMLAppContrastInfoElement;
        "app-create-slide": HTMLAppCreateSlideElement;
        "app-custom-data": HTMLAppCustomDataElement;
        "app-custom-images": HTMLAppCustomImagesElement;
        "app-dashboard": HTMLAppDashboardElement;
        "app-dashboard-deck-actions": HTMLAppDashboardDeckActionsElement;
        "app-deck-delete": HTMLAppDeckDeleteElement;
        "app-deck-fonts": HTMLAppDeckFontsElement;
        "app-deck-header-footer": HTMLAppDeckHeaderFooterElement;
        "app-deck-style": HTMLAppDeckStyleElement;
        "app-deck-transition": HTMLAppDeckTransitionElement;
        "app-demo": HTMLAppDemoElement;
        "app-developer": HTMLAppDeveloperElement;
        "app-discover": HTMLAppDiscoverElement;
        "app-edit-slide": HTMLAppEditSlideElement;
        "app-edit-slide-author": HTMLAppEditSlideAuthorElement;
        "app-edit-slide-chart": HTMLAppEditSlideChartElement;
        "app-edit-slide-qrcode": HTMLAppEditSlideQrcodeElement;
        "app-editor": HTMLAppEditorElement;
        "app-element-delete": HTMLAppElementDeleteElement;
        "app-element-style": HTMLAppElementStyleElement;
        "app-embed": HTMLAppEmbedElement;
        "app-enterprise": HTMLAppEnterpriseElement;
        "app-expansion-panel": HTMLAppExpansionPanelElement;
        "app-faq": HTMLAppFaqElement;
        "app-features": HTMLAppFeaturesElement;
        "app-feed": HTMLAppFeedElement;
        "app-feed-card": HTMLAppFeedCardElement;
        "app-feed-card-tags": HTMLAppFeedCardTagsElement;
        "app-font-size": HTMLAppFontSizeElement;
        "app-footer": HTMLAppFooterElement;
        "app-fullscreen-info": HTMLAppFullscreenInfoElement;
        "app-get-help": HTMLAppGetHelpElement;
        "app-gif": HTMLAppGifElement;
        "app-go-offline": HTMLAppGoOfflineElement;
        "app-go-online": HTMLAppGoOnlineElement;
        "app-home": HTMLAppHomeElement;
        "app-image": HTMLAppImageElement;
        "app-image-columns": HTMLAppImageColumnsElement;
        "app-image-element": HTMLAppImageElementElement;
        "app-image-style": HTMLAppImageStyleElement;
        "app-inactivity": HTMLAppInactivityElement;
        "app-landing": HTMLAppLandingElement;
        "app-landing-content": HTMLAppLandingContentElement;
        "app-landing-deck": HTMLAppLandingDeckElement;
        "app-list": HTMLAppListElement;
        "app-logo": HTMLAppLogoElement;
        "app-math": HTMLAppMathElement;
        "app-menu": HTMLAppMenuElement;
        "app-more-deck-actions": HTMLAppMoreDeckActionsElement;
        "app-more-element-actions": HTMLAppMoreElementActionsElement;
        "app-more-share-options": HTMLAppMoreShareOptionsElement;
        "app-navigation": HTMLAppNavigationElement;
        "app-navigation-actions": HTMLAppNavigationActionsElement;
        "app-newsletter": HTMLAppNewsletterElement;
        "app-notes": HTMLAppNotesElement;
        "app-offline": HTMLAppOfflineElement;
        "app-opensource": HTMLAppOpensourceElement;
        "app-photo": HTMLAppPhotoElement;
        "app-playground": HTMLAppPlaygroundElement;
        "app-playground-placeholder": HTMLAppPlaygroundPlaceholderElement;
        "app-poll": HTMLAppPollElement;
        "app-poll-options": HTMLAppPollOptionsElement;
        "app-popular": HTMLAppPopularElement;
        "app-press": HTMLAppPressElement;
        "app-privacy": HTMLAppPrivacyElement;
        "app-publish": HTMLAppPublishElement;
        "app-publish-done": HTMLAppPublishDoneElement;
        "app-publish-edit": HTMLAppPublishEditElement;
        "app-random-gif": HTMLAppRandomGifElement;
        "app-remote": HTMLAppRemoteElement;
        "app-remote-connect": HTMLAppRemoteConnectElement;
        "app-remote-request": HTMLAppRemoteRequestElement;
        "app-reveal": HTMLAppRevealElement;
        "app-root": HTMLAppRootElement;
        "app-section-footer": HTMLAppSectionFooterElement;
        "app-select-target-element": HTMLAppSelectTargetElementElement;
        "app-services": HTMLAppServicesElement;
        "app-settings": HTMLAppSettingsElement;
        "app-shape": HTMLAppShapeElement;
        "app-share-deck": HTMLAppShareDeckElement;
        "app-share-options": HTMLAppShareOptionsElement;
        "app-signin": HTMLAppSigninElement;
        "app-slide-contrast": HTMLAppSlideContrastElement;
        "app-slide-navigate": HTMLAppSlideNavigateElement;
        "app-slot-type": HTMLAppSlotTypeElement;
        "app-team": HTMLAppTeamElement;
        "app-terms": HTMLAppTermsElement;
        "app-transform": HTMLAppTransformElement;
        "app-user-delete": HTMLAppUserDeleteElement;
        "app-user-info": HTMLAppUserInfoElement;
        "app-user-menu": HTMLAppUserMenuElement;
        "app-welcome": HTMLAppWelcomeElement;
        "app-youtube": HTMLAppYoutubeElement;
    }
}
declare namespace LocalJSX {
    interface AppAbout {
    }
    interface AppActionBusy {
        "iconSrc"?: string;
        "onActionReady"?: (event: CustomEvent<UIEvent>) => void;
    }
    interface AppActionHelp {
        "link"?: boolean;
        "onHelpSelected"?: (event: CustomEvent<void>) => void;
    }
    interface AppActionShare {
        "onActionPublish"?: (event: CustomEvent<void>) => void;
        "onOpenEmbed"?: (event: CustomEvent<void>) => void;
    }
    interface AppActionsDeck {
        "actionPublish"?: EventEmitter;
        "addSlide"?: EventEmitter;
        "animatePrevNextSlide"?: EventEmitter;
        "blockSlide"?: EventEmitter;
        "deckDidChange"?: EventEmitter;
        "fullscreen"?: boolean;
        "onSelectDeck"?: (event: CustomEvent<void>) => void;
        "signIn"?: EventEmitter;
        "slideTo"?: EventEmitter;
        "slides"?: JSX.IntrinsicElements[];
        "toggleFullScreen"?: EventEmitter;
    }
    interface AppActionsEditor {
        "fullscreen"?: boolean;
        "hideFooter"?: boolean;
        "onActionPublish"?: (event: CustomEvent<void>) => void;
        "onAddSlide"?: (event: CustomEvent<JSX.IntrinsicElements>) => void;
        "onAnimatePrevNextSlide"?: (event: CustomEvent<boolean>) => void;
        "onBlockSlide"?: (event: CustomEvent<boolean>) => void;
        "onDeckDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "onElementFocus"?: (event: CustomEvent<HTMLElement>) => void;
        "onSignIn"?: (event: CustomEvent<void>) => void;
        "onSlideCopy"?: (event: CustomEvent<HTMLElement>) => void;
        "onSlideTo"?: (event: CustomEvent<number>) => void;
        "onToggleFullScreen"?: (event: CustomEvent<void>) => void;
        "slides"?: JSX.IntrinsicElements[];
    }
    interface AppActionsElement {
        "elementFocus"?: EventEmitter;
        "onBlockSlide"?: (event: CustomEvent<boolean>) => void;
        "onCodeDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "onImgDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "onMathDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "onNotesDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "onResetted"?: (event: CustomEvent<void>) => void;
        "onSignIn"?: (event: CustomEvent<void>) => void;
        "onSlideDelete"?: (event: CustomEvent<HTMLElement>) => void;
        "onSlideDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "slideCopy"?: EventEmitter;
    }
    interface AppAlign {
        "onAlignChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppAvatar {
        "ariaLabel"?: string;
        "src"?: string;
    }
    interface AppBoxShadow {
        "onBoxShadowDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppBreadcrumbs {
        "onStepTo"?: (event: CustomEvent<HTMLElement | undefined>) => void;
        "step"?: BreadcrumbsStep;
    }
    interface AppCode {
        "codeDidChange"?: EventEmitter<HTMLElement>;
        "selectedElement"?: HTMLElement;
    }
    interface AppCodeLanguages {
        "codeDidChange"?: EventEmitter<HTMLElement>;
        "currentLanguage"?: PrismLanguage | undefined;
        "selectedElement"?: HTMLElement;
    }
    interface AppColorChart {
        "moreColors"?: boolean;
        "onColorChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppColorCode {
        "moreColors"?: boolean;
        "onCodeDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppColorQrcode {
        "moreColors"?: boolean;
        "onColorChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppColorSides {
        "moreColors"?: boolean;
        "onColorChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
        "template"?: 'split' | 'author';
    }
    interface AppColorTextBackground {
        "colorType"?: 'text' | 'background';
        "deck"?: boolean;
        "expander"?: boolean;
        "moreColors"?: boolean;
        "onColorChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
        "slide"?: boolean;
    }
    interface AppContact {
    }
    interface AppContactForm {
    }
    interface AppContrastInfo {
    }
    interface AppCreateSlide {
        "onSignIn"?: (event: CustomEvent<void>) => void;
    }
    interface AppCustomData {
    }
    interface AppCustomImages {
    }
    interface AppDashboard {
    }
    interface AppDashboardDeckActions {
        "deck"?: Deck;
        "onDeckCloned"?: (event: CustomEvent<DeckDashboardCloneResult>) => void;
        "onDeckDeleted"?: (event: CustomEvent<string>) => void;
    }
    interface AppDeckDelete {
        "deckName"?: string;
        "published"?: string;
    }
    interface AppDeckFonts {
        "deckElement"?: HTMLElement;
        "moreColors"?: boolean;
        "onFontsChange"?: (event: CustomEvent<void>) => void;
    }
    interface AppDeckHeaderFooter {
        "deckDidChange"?: EventEmitter<HTMLElement>;
        "deckElement"?: HTMLElement;
        "onNavigateSettings"?: (event: CustomEvent<void>) => void;
        "onNavigateSignIn"?: (event: CustomEvent<void>) => void;
    }
    interface AppDeckStyle {
        "blockSlide"?: EventEmitter<boolean>;
        "deckDidChange"?: EventEmitter<HTMLElement>;
        "signIn"?: EventEmitter<void>;
    }
    interface AppDeckTransition {
        "deckElement"?: HTMLElement;
        "onDeckNeedChange"?: (event: CustomEvent<DeckAction>) => void;
        "onTransitionChange"?: (event: CustomEvent<void>) => void;
    }
    interface AppDemo {
        "selectedElement"?: HTMLElement;
    }
    interface AppDeveloper {
    }
    interface AppDiscover {
    }
    interface AppEditSlide {
        "author"?: boolean;
        "chart"?: boolean;
        "qrCode"?: boolean;
        "selectedElement"?: HTMLElement;
        "slideDidChange"?: EventEmitter<HTMLElement>;
    }
    interface AppEditSlideAuthor {
        "selectedElement"?: HTMLElement;
        "slideDidChange"?: EventEmitter<HTMLElement>;
    }
    interface AppEditSlideChart {
        "onAction"?: (event: CustomEvent<EditAction>) => void;
        "selectedElement"?: HTMLElement;
        "slideDidChange"?: EventEmitter<HTMLElement>;
    }
    interface AppEditSlideQrcode {
        "onAction"?: (event: CustomEvent<EditAction>) => void;
        "selectedElement"?: HTMLElement;
        "slideDidChange"?: EventEmitter<HTMLElement>;
    }
    interface AppEditor {
        "deckId"?: string;
    }
    interface AppElementDelete {
    }
    interface AppElementStyle {
        "code"?: boolean;
        "image"?: boolean;
        "imageHelper"?: ImageHelper;
        "imgDidChange"?: EventEmitter<HTMLElement>;
        "math"?: boolean;
        "onOptionsDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
        "shape"?: 'shape' | 'text' | undefined;
        "slide"?: boolean;
    }
    interface AppEmbed {
    }
    interface AppEnterprise {
    }
    interface AppExpansionPanel {
        "expanded"?: 'open' | 'close';
        "expander"?: boolean;
    }
    interface AppFaq {
    }
    interface AppFeatures {
    }
    interface AppFeed {
    }
    interface AppFeedCard {
        "compact"?: boolean;
        "deck"?: Deck;
    }
    interface AppFeedCardTags {
        "disableRemove"?: boolean;
        "editable"?: boolean;
        "onRemoveTag"?: (event: CustomEvent<string>) => void;
        "tags"?: string[];
    }
    interface AppFontSize {
        "onCodeDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
        "selector"?: '--deckgo-highlight-code-font-size' | '--deckgo-math-font-size';
    }
    interface AppFooter {
        "display"?: 'menu' | 'landing';
    }
    interface AppFullscreenInfo {
    }
    interface AppGetHelp {
    }
    interface AppGif {
    }
    interface AppGoOffline {
        "onDoneOffline"?: (event: CustomEvent<void>) => void;
        "onInProgress"?: (event: CustomEvent<boolean>) => void;
    }
    interface AppGoOnline {
        "onDoneOnline"?: (event: CustomEvent<void>) => void;
        "onInProgress"?: (event: CustomEvent<boolean>) => void;
    }
    interface AppHome {
    }
    interface AppImage {
        "deck"?: boolean;
        "deleteBackground"?: boolean;
        "expander"?: boolean;
        "onAction"?: (event: CustomEvent<ImageAction>) => void;
        "selectedElement"?: HTMLElement;
        "slide"?: boolean;
    }
    interface AppImageColumns {
        "imagesEven"?: (UnsplashPhoto | TenorGif | StorageFile)[];
        "imagesOdd"?: (UnsplashPhoto | TenorGif | StorageFile)[];
        "onSelectImage"?: (event: CustomEvent<UnsplashPhoto | TenorGif | StorageFile>) => void;
    }
    interface AppImageElement {
        "selectedElement"?: HTMLElement;
        "slide"?: boolean;
    }
    interface AppImageStyle {
        "onImgDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppInactivity {
        "fullscreen"?: boolean;
        "onMouseInactivity"?: (event: CustomEvent<boolean>) => void;
    }
    interface AppLanding {
    }
    interface AppLandingContent {
    }
    interface AppLandingDeck {
    }
    interface AppList {
        "onToggleList"?: (event: CustomEvent<SlotType.OL | SlotType.UL>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppLogo {
    }
    interface AppMath {
        "mathDidChange"?: EventEmitter<HTMLElement>;
        "selectedElement"?: HTMLElement;
    }
    interface AppMenu {
    }
    interface AppMoreDeckActions {
        "offline"?: boolean;
    }
    interface AppMoreElementActions {
        "copy"?: boolean;
        "images"?: boolean;
        "notes"?: boolean;
    }
    interface AppMoreShareOptions {
    }
    interface AppNavigation {
        "menuToggle"?: boolean;
        "presentation"?: boolean;
        "publish"?: boolean;
        "user"?: boolean;
    }
    interface AppNavigationActions {
        "onActionPublish"?: (event: CustomEvent<void>) => void;
        "presentation"?: boolean;
        "publish"?: boolean;
        "signIn"?: boolean;
    }
    interface AppNewsletter {
    }
    interface AppNotes {
        "selectedElement"?: HTMLElement;
    }
    interface AppOffline {
        "offline"?: boolean;
    }
    interface AppOpensource {
    }
    interface AppPhoto {
    }
    interface AppPlayground {
        "selectedElement"?: HTMLElement;
    }
    interface AppPlaygroundPlaceholder {
    }
    interface AppPoll {
        "pollKey"?: string;
    }
    interface AppPollOptions {
        "selectedElement"?: HTMLElement;
        "slideDidChange"?: EventEmitter<HTMLElement>;
    }
    interface AppPopular {
        "description"?: boolean;
        "help"?: boolean;
    }
    interface AppPress {
    }
    interface AppPrivacy {
    }
    interface AppPublish {
    }
    interface AppPublishDone {
        "publishedUrl"?: string;
    }
    interface AppPublishEdit {
        "onPublished"?: (event: CustomEvent<string>) => void;
    }
    interface AppRandomGif {
        "keyword"?: string;
    }
    interface AppRemote {
    }
    interface AppRemoteConnect {
    }
    interface AppRemoteRequest {
    }
    interface AppReveal {
        "onToggleReveal"?: (event: CustomEvent<boolean>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppRoot {
    }
    interface AppSectionFooter {
        "action"?: boolean;
    }
    interface AppSelectTargetElement {
        "background"?: boolean;
        "chart"?: boolean;
        "code"?: boolean;
        "headerFooter"?: boolean;
        "image"?: boolean;
        "onApplyTo"?: (event: CustomEvent<TargetElement>) => void;
        "qrCode"?: boolean;
        "shape"?: boolean;
        "sides"?: boolean;
        "slide"?: boolean;
        "textTarget"?: boolean;
        "transition"?: boolean;
    }
    interface AppServices {
    }
    interface AppSettings {
    }
    interface AppShape {
        "selectedElement"?: HTMLElement;
    }
    interface AppShareDeck {
    }
    interface AppShareOptions {
        "onSelectedOption"?: (event: CustomEvent<MoreAction>) => void;
    }
    interface AppSignin {
        "redirect"?: string;
        "redirectId"?: string;
    }
    interface AppSlideContrast {
    }
    interface AppSlideNavigate {
        "onReorder"?: (event: CustomEvent<ItemReorderEventDetail>) => void;
    }
    interface AppSlotType {
        "onSelectType"?: (event: CustomEvent<SlotType | null>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppTeam {
    }
    interface AppTerms {
    }
    interface AppTransform {
        "selectedElement"?: HTMLElement;
    }
    interface AppUserDelete {
        "username"?: string;
    }
    interface AppUserInfo {
        "avatarColSize"?: number;
    }
    interface AppUserMenu {
    }
    interface AppWelcome {
    }
    interface AppYoutube {
        "selectedElement"?: HTMLElement;
    }
    interface IntrinsicElements {
        "app-about": AppAbout;
        "app-action-busy": AppActionBusy;
        "app-action-help": AppActionHelp;
        "app-action-share": AppActionShare;
        "app-actions-deck": AppActionsDeck;
        "app-actions-editor": AppActionsEditor;
        "app-actions-element": AppActionsElement;
        "app-align": AppAlign;
        "app-avatar": AppAvatar;
        "app-box-shadow": AppBoxShadow;
        "app-breadcrumbs": AppBreadcrumbs;
        "app-code": AppCode;
        "app-code-languages": AppCodeLanguages;
        "app-color-chart": AppColorChart;
        "app-color-code": AppColorCode;
        "app-color-qrcode": AppColorQrcode;
        "app-color-sides": AppColorSides;
        "app-color-text-background": AppColorTextBackground;
        "app-contact": AppContact;
        "app-contact-form": AppContactForm;
        "app-contrast-info": AppContrastInfo;
        "app-create-slide": AppCreateSlide;
        "app-custom-data": AppCustomData;
        "app-custom-images": AppCustomImages;
        "app-dashboard": AppDashboard;
        "app-dashboard-deck-actions": AppDashboardDeckActions;
        "app-deck-delete": AppDeckDelete;
        "app-deck-fonts": AppDeckFonts;
        "app-deck-header-footer": AppDeckHeaderFooter;
        "app-deck-style": AppDeckStyle;
        "app-deck-transition": AppDeckTransition;
        "app-demo": AppDemo;
        "app-developer": AppDeveloper;
        "app-discover": AppDiscover;
        "app-edit-slide": AppEditSlide;
        "app-edit-slide-author": AppEditSlideAuthor;
        "app-edit-slide-chart": AppEditSlideChart;
        "app-edit-slide-qrcode": AppEditSlideQrcode;
        "app-editor": AppEditor;
        "app-element-delete": AppElementDelete;
        "app-element-style": AppElementStyle;
        "app-embed": AppEmbed;
        "app-enterprise": AppEnterprise;
        "app-expansion-panel": AppExpansionPanel;
        "app-faq": AppFaq;
        "app-features": AppFeatures;
        "app-feed": AppFeed;
        "app-feed-card": AppFeedCard;
        "app-feed-card-tags": AppFeedCardTags;
        "app-font-size": AppFontSize;
        "app-footer": AppFooter;
        "app-fullscreen-info": AppFullscreenInfo;
        "app-get-help": AppGetHelp;
        "app-gif": AppGif;
        "app-go-offline": AppGoOffline;
        "app-go-online": AppGoOnline;
        "app-home": AppHome;
        "app-image": AppImage;
        "app-image-columns": AppImageColumns;
        "app-image-element": AppImageElement;
        "app-image-style": AppImageStyle;
        "app-inactivity": AppInactivity;
        "app-landing": AppLanding;
        "app-landing-content": AppLandingContent;
        "app-landing-deck": AppLandingDeck;
        "app-list": AppList;
        "app-logo": AppLogo;
        "app-math": AppMath;
        "app-menu": AppMenu;
        "app-more-deck-actions": AppMoreDeckActions;
        "app-more-element-actions": AppMoreElementActions;
        "app-more-share-options": AppMoreShareOptions;
        "app-navigation": AppNavigation;
        "app-navigation-actions": AppNavigationActions;
        "app-newsletter": AppNewsletter;
        "app-notes": AppNotes;
        "app-offline": AppOffline;
        "app-opensource": AppOpensource;
        "app-photo": AppPhoto;
        "app-playground": AppPlayground;
        "app-playground-placeholder": AppPlaygroundPlaceholder;
        "app-poll": AppPoll;
        "app-poll-options": AppPollOptions;
        "app-popular": AppPopular;
        "app-press": AppPress;
        "app-privacy": AppPrivacy;
        "app-publish": AppPublish;
        "app-publish-done": AppPublishDone;
        "app-publish-edit": AppPublishEdit;
        "app-random-gif": AppRandomGif;
        "app-remote": AppRemote;
        "app-remote-connect": AppRemoteConnect;
        "app-remote-request": AppRemoteRequest;
        "app-reveal": AppReveal;
        "app-root": AppRoot;
        "app-section-footer": AppSectionFooter;
        "app-select-target-element": AppSelectTargetElement;
        "app-services": AppServices;
        "app-settings": AppSettings;
        "app-shape": AppShape;
        "app-share-deck": AppShareDeck;
        "app-share-options": AppShareOptions;
        "app-signin": AppSignin;
        "app-slide-contrast": AppSlideContrast;
        "app-slide-navigate": AppSlideNavigate;
        "app-slot-type": AppSlotType;
        "app-team": AppTeam;
        "app-terms": AppTerms;
        "app-transform": AppTransform;
        "app-user-delete": AppUserDelete;
        "app-user-info": AppUserInfo;
        "app-user-menu": AppUserMenu;
        "app-welcome": AppWelcome;
        "app-youtube": AppYoutube;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-about": LocalJSX.AppAbout & JSXBase.HTMLAttributes<HTMLAppAboutElement>;
            "app-action-busy": LocalJSX.AppActionBusy & JSXBase.HTMLAttributes<HTMLAppActionBusyElement>;
            "app-action-help": LocalJSX.AppActionHelp & JSXBase.HTMLAttributes<HTMLAppActionHelpElement>;
            "app-action-share": LocalJSX.AppActionShare & JSXBase.HTMLAttributes<HTMLAppActionShareElement>;
            "app-actions-deck": LocalJSX.AppActionsDeck & JSXBase.HTMLAttributes<HTMLAppActionsDeckElement>;
            "app-actions-editor": LocalJSX.AppActionsEditor & JSXBase.HTMLAttributes<HTMLAppActionsEditorElement>;
            "app-actions-element": LocalJSX.AppActionsElement & JSXBase.HTMLAttributes<HTMLAppActionsElementElement>;
            "app-align": LocalJSX.AppAlign & JSXBase.HTMLAttributes<HTMLAppAlignElement>;
            "app-avatar": LocalJSX.AppAvatar & JSXBase.HTMLAttributes<HTMLAppAvatarElement>;
            "app-box-shadow": LocalJSX.AppBoxShadow & JSXBase.HTMLAttributes<HTMLAppBoxShadowElement>;
            "app-breadcrumbs": LocalJSX.AppBreadcrumbs & JSXBase.HTMLAttributes<HTMLAppBreadcrumbsElement>;
            "app-code": LocalJSX.AppCode & JSXBase.HTMLAttributes<HTMLAppCodeElement>;
            "app-code-languages": LocalJSX.AppCodeLanguages & JSXBase.HTMLAttributes<HTMLAppCodeLanguagesElement>;
            "app-color-chart": LocalJSX.AppColorChart & JSXBase.HTMLAttributes<HTMLAppColorChartElement>;
            "app-color-code": LocalJSX.AppColorCode & JSXBase.HTMLAttributes<HTMLAppColorCodeElement>;
            "app-color-qrcode": LocalJSX.AppColorQrcode & JSXBase.HTMLAttributes<HTMLAppColorQrcodeElement>;
            "app-color-sides": LocalJSX.AppColorSides & JSXBase.HTMLAttributes<HTMLAppColorSidesElement>;
            "app-color-text-background": LocalJSX.AppColorTextBackground & JSXBase.HTMLAttributes<HTMLAppColorTextBackgroundElement>;
            "app-contact": LocalJSX.AppContact & JSXBase.HTMLAttributes<HTMLAppContactElement>;
            "app-contact-form": LocalJSX.AppContactForm & JSXBase.HTMLAttributes<HTMLAppContactFormElement>;
            "app-contrast-info": LocalJSX.AppContrastInfo & JSXBase.HTMLAttributes<HTMLAppContrastInfoElement>;
            "app-create-slide": LocalJSX.AppCreateSlide & JSXBase.HTMLAttributes<HTMLAppCreateSlideElement>;
            "app-custom-data": LocalJSX.AppCustomData & JSXBase.HTMLAttributes<HTMLAppCustomDataElement>;
            "app-custom-images": LocalJSX.AppCustomImages & JSXBase.HTMLAttributes<HTMLAppCustomImagesElement>;
            "app-dashboard": LocalJSX.AppDashboard & JSXBase.HTMLAttributes<HTMLAppDashboardElement>;
            "app-dashboard-deck-actions": LocalJSX.AppDashboardDeckActions & JSXBase.HTMLAttributes<HTMLAppDashboardDeckActionsElement>;
            "app-deck-delete": LocalJSX.AppDeckDelete & JSXBase.HTMLAttributes<HTMLAppDeckDeleteElement>;
            "app-deck-fonts": LocalJSX.AppDeckFonts & JSXBase.HTMLAttributes<HTMLAppDeckFontsElement>;
            "app-deck-header-footer": LocalJSX.AppDeckHeaderFooter & JSXBase.HTMLAttributes<HTMLAppDeckHeaderFooterElement>;
            "app-deck-style": LocalJSX.AppDeckStyle & JSXBase.HTMLAttributes<HTMLAppDeckStyleElement>;
            "app-deck-transition": LocalJSX.AppDeckTransition & JSXBase.HTMLAttributes<HTMLAppDeckTransitionElement>;
            "app-demo": LocalJSX.AppDemo & JSXBase.HTMLAttributes<HTMLAppDemoElement>;
            "app-developer": LocalJSX.AppDeveloper & JSXBase.HTMLAttributes<HTMLAppDeveloperElement>;
            "app-discover": LocalJSX.AppDiscover & JSXBase.HTMLAttributes<HTMLAppDiscoverElement>;
            "app-edit-slide": LocalJSX.AppEditSlide & JSXBase.HTMLAttributes<HTMLAppEditSlideElement>;
            "app-edit-slide-author": LocalJSX.AppEditSlideAuthor & JSXBase.HTMLAttributes<HTMLAppEditSlideAuthorElement>;
            "app-edit-slide-chart": LocalJSX.AppEditSlideChart & JSXBase.HTMLAttributes<HTMLAppEditSlideChartElement>;
            "app-edit-slide-qrcode": LocalJSX.AppEditSlideQrcode & JSXBase.HTMLAttributes<HTMLAppEditSlideQrcodeElement>;
            "app-editor": LocalJSX.AppEditor & JSXBase.HTMLAttributes<HTMLAppEditorElement>;
            "app-element-delete": LocalJSX.AppElementDelete & JSXBase.HTMLAttributes<HTMLAppElementDeleteElement>;
            "app-element-style": LocalJSX.AppElementStyle & JSXBase.HTMLAttributes<HTMLAppElementStyleElement>;
            "app-embed": LocalJSX.AppEmbed & JSXBase.HTMLAttributes<HTMLAppEmbedElement>;
            "app-enterprise": LocalJSX.AppEnterprise & JSXBase.HTMLAttributes<HTMLAppEnterpriseElement>;
            "app-expansion-panel": LocalJSX.AppExpansionPanel & JSXBase.HTMLAttributes<HTMLAppExpansionPanelElement>;
            "app-faq": LocalJSX.AppFaq & JSXBase.HTMLAttributes<HTMLAppFaqElement>;
            "app-features": LocalJSX.AppFeatures & JSXBase.HTMLAttributes<HTMLAppFeaturesElement>;
            "app-feed": LocalJSX.AppFeed & JSXBase.HTMLAttributes<HTMLAppFeedElement>;
            "app-feed-card": LocalJSX.AppFeedCard & JSXBase.HTMLAttributes<HTMLAppFeedCardElement>;
            "app-feed-card-tags": LocalJSX.AppFeedCardTags & JSXBase.HTMLAttributes<HTMLAppFeedCardTagsElement>;
            "app-font-size": LocalJSX.AppFontSize & JSXBase.HTMLAttributes<HTMLAppFontSizeElement>;
            "app-footer": LocalJSX.AppFooter & JSXBase.HTMLAttributes<HTMLAppFooterElement>;
            "app-fullscreen-info": LocalJSX.AppFullscreenInfo & JSXBase.HTMLAttributes<HTMLAppFullscreenInfoElement>;
            "app-get-help": LocalJSX.AppGetHelp & JSXBase.HTMLAttributes<HTMLAppGetHelpElement>;
            "app-gif": LocalJSX.AppGif & JSXBase.HTMLAttributes<HTMLAppGifElement>;
            "app-go-offline": LocalJSX.AppGoOffline & JSXBase.HTMLAttributes<HTMLAppGoOfflineElement>;
            "app-go-online": LocalJSX.AppGoOnline & JSXBase.HTMLAttributes<HTMLAppGoOnlineElement>;
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-image": LocalJSX.AppImage & JSXBase.HTMLAttributes<HTMLAppImageElement>;
            "app-image-columns": LocalJSX.AppImageColumns & JSXBase.HTMLAttributes<HTMLAppImageColumnsElement>;
            "app-image-element": LocalJSX.AppImageElement & JSXBase.HTMLAttributes<HTMLAppImageElementElement>;
            "app-image-style": LocalJSX.AppImageStyle & JSXBase.HTMLAttributes<HTMLAppImageStyleElement>;
            "app-inactivity": LocalJSX.AppInactivity & JSXBase.HTMLAttributes<HTMLAppInactivityElement>;
            "app-landing": LocalJSX.AppLanding & JSXBase.HTMLAttributes<HTMLAppLandingElement>;
            "app-landing-content": LocalJSX.AppLandingContent & JSXBase.HTMLAttributes<HTMLAppLandingContentElement>;
            "app-landing-deck": LocalJSX.AppLandingDeck & JSXBase.HTMLAttributes<HTMLAppLandingDeckElement>;
            "app-list": LocalJSX.AppList & JSXBase.HTMLAttributes<HTMLAppListElement>;
            "app-logo": LocalJSX.AppLogo & JSXBase.HTMLAttributes<HTMLAppLogoElement>;
            "app-math": LocalJSX.AppMath & JSXBase.HTMLAttributes<HTMLAppMathElement>;
            "app-menu": LocalJSX.AppMenu & JSXBase.HTMLAttributes<HTMLAppMenuElement>;
            "app-more-deck-actions": LocalJSX.AppMoreDeckActions & JSXBase.HTMLAttributes<HTMLAppMoreDeckActionsElement>;
            "app-more-element-actions": LocalJSX.AppMoreElementActions & JSXBase.HTMLAttributes<HTMLAppMoreElementActionsElement>;
            "app-more-share-options": LocalJSX.AppMoreShareOptions & JSXBase.HTMLAttributes<HTMLAppMoreShareOptionsElement>;
            "app-navigation": LocalJSX.AppNavigation & JSXBase.HTMLAttributes<HTMLAppNavigationElement>;
            "app-navigation-actions": LocalJSX.AppNavigationActions & JSXBase.HTMLAttributes<HTMLAppNavigationActionsElement>;
            "app-newsletter": LocalJSX.AppNewsletter & JSXBase.HTMLAttributes<HTMLAppNewsletterElement>;
            "app-notes": LocalJSX.AppNotes & JSXBase.HTMLAttributes<HTMLAppNotesElement>;
            "app-offline": LocalJSX.AppOffline & JSXBase.HTMLAttributes<HTMLAppOfflineElement>;
            "app-opensource": LocalJSX.AppOpensource & JSXBase.HTMLAttributes<HTMLAppOpensourceElement>;
            "app-photo": LocalJSX.AppPhoto & JSXBase.HTMLAttributes<HTMLAppPhotoElement>;
            "app-playground": LocalJSX.AppPlayground & JSXBase.HTMLAttributes<HTMLAppPlaygroundElement>;
            "app-playground-placeholder": LocalJSX.AppPlaygroundPlaceholder & JSXBase.HTMLAttributes<HTMLAppPlaygroundPlaceholderElement>;
            "app-poll": LocalJSX.AppPoll & JSXBase.HTMLAttributes<HTMLAppPollElement>;
            "app-poll-options": LocalJSX.AppPollOptions & JSXBase.HTMLAttributes<HTMLAppPollOptionsElement>;
            "app-popular": LocalJSX.AppPopular & JSXBase.HTMLAttributes<HTMLAppPopularElement>;
            "app-press": LocalJSX.AppPress & JSXBase.HTMLAttributes<HTMLAppPressElement>;
            "app-privacy": LocalJSX.AppPrivacy & JSXBase.HTMLAttributes<HTMLAppPrivacyElement>;
            "app-publish": LocalJSX.AppPublish & JSXBase.HTMLAttributes<HTMLAppPublishElement>;
            "app-publish-done": LocalJSX.AppPublishDone & JSXBase.HTMLAttributes<HTMLAppPublishDoneElement>;
            "app-publish-edit": LocalJSX.AppPublishEdit & JSXBase.HTMLAttributes<HTMLAppPublishEditElement>;
            "app-random-gif": LocalJSX.AppRandomGif & JSXBase.HTMLAttributes<HTMLAppRandomGifElement>;
            "app-remote": LocalJSX.AppRemote & JSXBase.HTMLAttributes<HTMLAppRemoteElement>;
            "app-remote-connect": LocalJSX.AppRemoteConnect & JSXBase.HTMLAttributes<HTMLAppRemoteConnectElement>;
            "app-remote-request": LocalJSX.AppRemoteRequest & JSXBase.HTMLAttributes<HTMLAppRemoteRequestElement>;
            "app-reveal": LocalJSX.AppReveal & JSXBase.HTMLAttributes<HTMLAppRevealElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "app-section-footer": LocalJSX.AppSectionFooter & JSXBase.HTMLAttributes<HTMLAppSectionFooterElement>;
            "app-select-target-element": LocalJSX.AppSelectTargetElement & JSXBase.HTMLAttributes<HTMLAppSelectTargetElementElement>;
            "app-services": LocalJSX.AppServices & JSXBase.HTMLAttributes<HTMLAppServicesElement>;
            "app-settings": LocalJSX.AppSettings & JSXBase.HTMLAttributes<HTMLAppSettingsElement>;
            "app-shape": LocalJSX.AppShape & JSXBase.HTMLAttributes<HTMLAppShapeElement>;
            "app-share-deck": LocalJSX.AppShareDeck & JSXBase.HTMLAttributes<HTMLAppShareDeckElement>;
            "app-share-options": LocalJSX.AppShareOptions & JSXBase.HTMLAttributes<HTMLAppShareOptionsElement>;
            "app-signin": LocalJSX.AppSignin & JSXBase.HTMLAttributes<HTMLAppSigninElement>;
            "app-slide-contrast": LocalJSX.AppSlideContrast & JSXBase.HTMLAttributes<HTMLAppSlideContrastElement>;
            "app-slide-navigate": LocalJSX.AppSlideNavigate & JSXBase.HTMLAttributes<HTMLAppSlideNavigateElement>;
            "app-slot-type": LocalJSX.AppSlotType & JSXBase.HTMLAttributes<HTMLAppSlotTypeElement>;
            "app-team": LocalJSX.AppTeam & JSXBase.HTMLAttributes<HTMLAppTeamElement>;
            "app-terms": LocalJSX.AppTerms & JSXBase.HTMLAttributes<HTMLAppTermsElement>;
            "app-transform": LocalJSX.AppTransform & JSXBase.HTMLAttributes<HTMLAppTransformElement>;
            "app-user-delete": LocalJSX.AppUserDelete & JSXBase.HTMLAttributes<HTMLAppUserDeleteElement>;
            "app-user-info": LocalJSX.AppUserInfo & JSXBase.HTMLAttributes<HTMLAppUserInfoElement>;
            "app-user-menu": LocalJSX.AppUserMenu & JSXBase.HTMLAttributes<HTMLAppUserMenuElement>;
            "app-welcome": LocalJSX.AppWelcome & JSXBase.HTMLAttributes<HTMLAppWelcomeElement>;
            "app-youtube": LocalJSX.AppYoutube & JSXBase.HTMLAttributes<HTMLAppYoutubeElement>;
        }
    }
}
