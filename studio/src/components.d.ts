/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  EventEmitter,
} from '@stencil/core';
import {
  Deck,
} from './app/models/data/deck';
import {
  MoreAction,
} from './app/utils/editor/more-action';

export namespace Components {
  interface AppAbout {}
  interface AppAddSlideAction {}
  interface AppAvatar {
    'src': string;
  }
  interface AppCode {
    'codeDidChange': EventEmitter<HTMLElement>;
    'selectedElement': HTMLElement;
  }
  interface AppColor {
    'background': string;
    'color': string;
    'deckOrSlide': boolean;
    'selectedElement': HTMLElement;
  }
  interface AppContact {}
  interface AppCustomImages {}
  interface AppDeckOrSlide {
    'deckOrSlide': boolean;
  }
  interface AppDeveloper {}
  interface AppEditor {
    'deckId': string;
  }
  interface AppEditorActions {
    'displayHelp': () => Promise<void>;
    'fullscreen': boolean;
    'hideFooterActions': boolean;
    'slides': any[];
  }
  interface AppEditorToolbar {
    'blurSelectedElement': () => Promise<void>;
    'hideToolbar': () => Promise<void>;
    'touch': (element: HTMLElement) => Promise<void>;
    'unSelect': () => Promise<void>;
  }
  interface AppFeed {}
  interface AppFeedCard {
    'compact': boolean;
    'deck': Deck;
  }
  interface AppFeedCardTags {
    'disableRemove': boolean;
    'editable': boolean;
    'tags': string[];
  }
  interface AppFooter {}
  interface AppFullscreenInfo {}
  interface AppGetHelp {}
  interface AppGif {}
  interface AppHelpAction {
    'displayHelp': () => Promise<void>;
  }
  interface AppHome {}
  interface AppImage {
    'deckOrSlide': boolean;
  }
  interface AppImageColumns {
    'imagesEven': (UnsplashPhoto | TenorGif | StorageFile)[];
    'imagesOdd': (UnsplashPhoto | TenorGif | StorageFile)[];
  }
  interface AppInfoImages {}
  interface AppLogo {}
  interface AppMenu {}
  interface AppMoreActions {}
  interface AppMoreShareOptions {}
  interface AppNavigation {
    'menuToggle': boolean;
    'presentation': boolean;
    'publish': boolean;
    'user': boolean;
  }
  interface AppNavigationActions {
    'presentation': boolean;
    'publish': boolean;
    'signIn': boolean;
  }
  interface AppNewsletter {}
  interface AppOpensource {}
  interface AppPhoto {}
  interface AppPopular {}
  interface AppPrivacy {}
  interface AppPublish {}
  interface AppPublishDone {
    'publishedUrl': string;
  }
  interface AppPublishEdit {}
  interface AppRemote {}
  interface AppRoot {}
  interface AppServices {}
  interface AppSettings {}
  interface AppShareAction {}
  interface AppShareDeck {
    'openShare': () => Promise<void>;
  }
  interface AppShareOptions {}
  interface AppSignin {
    'redirect': string;
    'redirectId': string;
  }
  interface AppSlideNavigate {}
  interface AppSlideType {}
  interface AppSlotType {
    'selectedElement': HTMLElement;
  }
  interface AppTeam {}
  interface AppTerms {}
  interface AppUserDelete {
    'username': string;
  }
  interface AppUserInfo {
    'avatarColSize': number;
  }
  interface AppUserMenu {}
}

declare global {


  interface HTMLAppAboutElement extends Components.AppAbout, HTMLStencilElement {}
  var HTMLAppAboutElement: {
    prototype: HTMLAppAboutElement;
    new (): HTMLAppAboutElement;
  };

  interface HTMLAppAddSlideActionElement extends Components.AppAddSlideAction, HTMLStencilElement {}
  var HTMLAppAddSlideActionElement: {
    prototype: HTMLAppAddSlideActionElement;
    new (): HTMLAppAddSlideActionElement;
  };

  interface HTMLAppAvatarElement extends Components.AppAvatar, HTMLStencilElement {}
  var HTMLAppAvatarElement: {
    prototype: HTMLAppAvatarElement;
    new (): HTMLAppAvatarElement;
  };

  interface HTMLAppCodeElement extends Components.AppCode, HTMLStencilElement {}
  var HTMLAppCodeElement: {
    prototype: HTMLAppCodeElement;
    new (): HTMLAppCodeElement;
  };

  interface HTMLAppColorElement extends Components.AppColor, HTMLStencilElement {}
  var HTMLAppColorElement: {
    prototype: HTMLAppColorElement;
    new (): HTMLAppColorElement;
  };

  interface HTMLAppContactElement extends Components.AppContact, HTMLStencilElement {}
  var HTMLAppContactElement: {
    prototype: HTMLAppContactElement;
    new (): HTMLAppContactElement;
  };

  interface HTMLAppCustomImagesElement extends Components.AppCustomImages, HTMLStencilElement {}
  var HTMLAppCustomImagesElement: {
    prototype: HTMLAppCustomImagesElement;
    new (): HTMLAppCustomImagesElement;
  };

  interface HTMLAppDeckOrSlideElement extends Components.AppDeckOrSlide, HTMLStencilElement {}
  var HTMLAppDeckOrSlideElement: {
    prototype: HTMLAppDeckOrSlideElement;
    new (): HTMLAppDeckOrSlideElement;
  };

  interface HTMLAppDeveloperElement extends Components.AppDeveloper, HTMLStencilElement {}
  var HTMLAppDeveloperElement: {
    prototype: HTMLAppDeveloperElement;
    new (): HTMLAppDeveloperElement;
  };

  interface HTMLAppEditorElement extends Components.AppEditor, HTMLStencilElement {}
  var HTMLAppEditorElement: {
    prototype: HTMLAppEditorElement;
    new (): HTMLAppEditorElement;
  };

  interface HTMLAppEditorActionsElement extends Components.AppEditorActions, HTMLStencilElement {}
  var HTMLAppEditorActionsElement: {
    prototype: HTMLAppEditorActionsElement;
    new (): HTMLAppEditorActionsElement;
  };

  interface HTMLAppEditorToolbarElement extends Components.AppEditorToolbar, HTMLStencilElement {}
  var HTMLAppEditorToolbarElement: {
    prototype: HTMLAppEditorToolbarElement;
    new (): HTMLAppEditorToolbarElement;
  };

  interface HTMLAppFeedElement extends Components.AppFeed, HTMLStencilElement {}
  var HTMLAppFeedElement: {
    prototype: HTMLAppFeedElement;
    new (): HTMLAppFeedElement;
  };

  interface HTMLAppFeedCardElement extends Components.AppFeedCard, HTMLStencilElement {}
  var HTMLAppFeedCardElement: {
    prototype: HTMLAppFeedCardElement;
    new (): HTMLAppFeedCardElement;
  };

  interface HTMLAppFeedCardTagsElement extends Components.AppFeedCardTags, HTMLStencilElement {}
  var HTMLAppFeedCardTagsElement: {
    prototype: HTMLAppFeedCardTagsElement;
    new (): HTMLAppFeedCardTagsElement;
  };

  interface HTMLAppFooterElement extends Components.AppFooter, HTMLStencilElement {}
  var HTMLAppFooterElement: {
    prototype: HTMLAppFooterElement;
    new (): HTMLAppFooterElement;
  };

  interface HTMLAppFullscreenInfoElement extends Components.AppFullscreenInfo, HTMLStencilElement {}
  var HTMLAppFullscreenInfoElement: {
    prototype: HTMLAppFullscreenInfoElement;
    new (): HTMLAppFullscreenInfoElement;
  };

  interface HTMLAppGetHelpElement extends Components.AppGetHelp, HTMLStencilElement {}
  var HTMLAppGetHelpElement: {
    prototype: HTMLAppGetHelpElement;
    new (): HTMLAppGetHelpElement;
  };

  interface HTMLAppGifElement extends Components.AppGif, HTMLStencilElement {}
  var HTMLAppGifElement: {
    prototype: HTMLAppGifElement;
    new (): HTMLAppGifElement;
  };

  interface HTMLAppHelpActionElement extends Components.AppHelpAction, HTMLStencilElement {}
  var HTMLAppHelpActionElement: {
    prototype: HTMLAppHelpActionElement;
    new (): HTMLAppHelpActionElement;
  };

  interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {}
  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };

  interface HTMLAppImageElement extends Components.AppImage, HTMLStencilElement {}
  var HTMLAppImageElement: {
    prototype: HTMLAppImageElement;
    new (): HTMLAppImageElement;
  };

  interface HTMLAppImageColumnsElement extends Components.AppImageColumns, HTMLStencilElement {}
  var HTMLAppImageColumnsElement: {
    prototype: HTMLAppImageColumnsElement;
    new (): HTMLAppImageColumnsElement;
  };

  interface HTMLAppInfoImagesElement extends Components.AppInfoImages, HTMLStencilElement {}
  var HTMLAppInfoImagesElement: {
    prototype: HTMLAppInfoImagesElement;
    new (): HTMLAppInfoImagesElement;
  };

  interface HTMLAppLogoElement extends Components.AppLogo, HTMLStencilElement {}
  var HTMLAppLogoElement: {
    prototype: HTMLAppLogoElement;
    new (): HTMLAppLogoElement;
  };

  interface HTMLAppMenuElement extends Components.AppMenu, HTMLStencilElement {}
  var HTMLAppMenuElement: {
    prototype: HTMLAppMenuElement;
    new (): HTMLAppMenuElement;
  };

  interface HTMLAppMoreActionsElement extends Components.AppMoreActions, HTMLStencilElement {}
  var HTMLAppMoreActionsElement: {
    prototype: HTMLAppMoreActionsElement;
    new (): HTMLAppMoreActionsElement;
  };

  interface HTMLAppMoreShareOptionsElement extends Components.AppMoreShareOptions, HTMLStencilElement {}
  var HTMLAppMoreShareOptionsElement: {
    prototype: HTMLAppMoreShareOptionsElement;
    new (): HTMLAppMoreShareOptionsElement;
  };

  interface HTMLAppNavigationElement extends Components.AppNavigation, HTMLStencilElement {}
  var HTMLAppNavigationElement: {
    prototype: HTMLAppNavigationElement;
    new (): HTMLAppNavigationElement;
  };

  interface HTMLAppNavigationActionsElement extends Components.AppNavigationActions, HTMLStencilElement {}
  var HTMLAppNavigationActionsElement: {
    prototype: HTMLAppNavigationActionsElement;
    new (): HTMLAppNavigationActionsElement;
  };

  interface HTMLAppNewsletterElement extends Components.AppNewsletter, HTMLStencilElement {}
  var HTMLAppNewsletterElement: {
    prototype: HTMLAppNewsletterElement;
    new (): HTMLAppNewsletterElement;
  };

  interface HTMLAppOpensourceElement extends Components.AppOpensource, HTMLStencilElement {}
  var HTMLAppOpensourceElement: {
    prototype: HTMLAppOpensourceElement;
    new (): HTMLAppOpensourceElement;
  };

  interface HTMLAppPhotoElement extends Components.AppPhoto, HTMLStencilElement {}
  var HTMLAppPhotoElement: {
    prototype: HTMLAppPhotoElement;
    new (): HTMLAppPhotoElement;
  };

  interface HTMLAppPopularElement extends Components.AppPopular, HTMLStencilElement {}
  var HTMLAppPopularElement: {
    prototype: HTMLAppPopularElement;
    new (): HTMLAppPopularElement;
  };

  interface HTMLAppPrivacyElement extends Components.AppPrivacy, HTMLStencilElement {}
  var HTMLAppPrivacyElement: {
    prototype: HTMLAppPrivacyElement;
    new (): HTMLAppPrivacyElement;
  };

  interface HTMLAppPublishElement extends Components.AppPublish, HTMLStencilElement {}
  var HTMLAppPublishElement: {
    prototype: HTMLAppPublishElement;
    new (): HTMLAppPublishElement;
  };

  interface HTMLAppPublishDoneElement extends Components.AppPublishDone, HTMLStencilElement {}
  var HTMLAppPublishDoneElement: {
    prototype: HTMLAppPublishDoneElement;
    new (): HTMLAppPublishDoneElement;
  };

  interface HTMLAppPublishEditElement extends Components.AppPublishEdit, HTMLStencilElement {}
  var HTMLAppPublishEditElement: {
    prototype: HTMLAppPublishEditElement;
    new (): HTMLAppPublishEditElement;
  };

  interface HTMLAppRemoteElement extends Components.AppRemote, HTMLStencilElement {}
  var HTMLAppRemoteElement: {
    prototype: HTMLAppRemoteElement;
    new (): HTMLAppRemoteElement;
  };

  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLAppServicesElement extends Components.AppServices, HTMLStencilElement {}
  var HTMLAppServicesElement: {
    prototype: HTMLAppServicesElement;
    new (): HTMLAppServicesElement;
  };

  interface HTMLAppSettingsElement extends Components.AppSettings, HTMLStencilElement {}
  var HTMLAppSettingsElement: {
    prototype: HTMLAppSettingsElement;
    new (): HTMLAppSettingsElement;
  };

  interface HTMLAppShareActionElement extends Components.AppShareAction, HTMLStencilElement {}
  var HTMLAppShareActionElement: {
    prototype: HTMLAppShareActionElement;
    new (): HTMLAppShareActionElement;
  };

  interface HTMLAppShareDeckElement extends Components.AppShareDeck, HTMLStencilElement {}
  var HTMLAppShareDeckElement: {
    prototype: HTMLAppShareDeckElement;
    new (): HTMLAppShareDeckElement;
  };

  interface HTMLAppShareOptionsElement extends Components.AppShareOptions, HTMLStencilElement {}
  var HTMLAppShareOptionsElement: {
    prototype: HTMLAppShareOptionsElement;
    new (): HTMLAppShareOptionsElement;
  };

  interface HTMLAppSigninElement extends Components.AppSignin, HTMLStencilElement {}
  var HTMLAppSigninElement: {
    prototype: HTMLAppSigninElement;
    new (): HTMLAppSigninElement;
  };

  interface HTMLAppSlideNavigateElement extends Components.AppSlideNavigate, HTMLStencilElement {}
  var HTMLAppSlideNavigateElement: {
    prototype: HTMLAppSlideNavigateElement;
    new (): HTMLAppSlideNavigateElement;
  };

  interface HTMLAppSlideTypeElement extends Components.AppSlideType, HTMLStencilElement {}
  var HTMLAppSlideTypeElement: {
    prototype: HTMLAppSlideTypeElement;
    new (): HTMLAppSlideTypeElement;
  };

  interface HTMLAppSlotTypeElement extends Components.AppSlotType, HTMLStencilElement {}
  var HTMLAppSlotTypeElement: {
    prototype: HTMLAppSlotTypeElement;
    new (): HTMLAppSlotTypeElement;
  };

  interface HTMLAppTeamElement extends Components.AppTeam, HTMLStencilElement {}
  var HTMLAppTeamElement: {
    prototype: HTMLAppTeamElement;
    new (): HTMLAppTeamElement;
  };

  interface HTMLAppTermsElement extends Components.AppTerms, HTMLStencilElement {}
  var HTMLAppTermsElement: {
    prototype: HTMLAppTermsElement;
    new (): HTMLAppTermsElement;
  };

  interface HTMLAppUserDeleteElement extends Components.AppUserDelete, HTMLStencilElement {}
  var HTMLAppUserDeleteElement: {
    prototype: HTMLAppUserDeleteElement;
    new (): HTMLAppUserDeleteElement;
  };

  interface HTMLAppUserInfoElement extends Components.AppUserInfo, HTMLStencilElement {}
  var HTMLAppUserInfoElement: {
    prototype: HTMLAppUserInfoElement;
    new (): HTMLAppUserInfoElement;
  };

  interface HTMLAppUserMenuElement extends Components.AppUserMenu, HTMLStencilElement {}
  var HTMLAppUserMenuElement: {
    prototype: HTMLAppUserMenuElement;
    new (): HTMLAppUserMenuElement;
  };
  interface HTMLElementTagNameMap {
    'app-about': HTMLAppAboutElement;
    'app-add-slide-action': HTMLAppAddSlideActionElement;
    'app-avatar': HTMLAppAvatarElement;
    'app-code': HTMLAppCodeElement;
    'app-color': HTMLAppColorElement;
    'app-contact': HTMLAppContactElement;
    'app-custom-images': HTMLAppCustomImagesElement;
    'app-deck-or-slide': HTMLAppDeckOrSlideElement;
    'app-developer': HTMLAppDeveloperElement;
    'app-editor': HTMLAppEditorElement;
    'app-editor-actions': HTMLAppEditorActionsElement;
    'app-editor-toolbar': HTMLAppEditorToolbarElement;
    'app-feed': HTMLAppFeedElement;
    'app-feed-card': HTMLAppFeedCardElement;
    'app-feed-card-tags': HTMLAppFeedCardTagsElement;
    'app-footer': HTMLAppFooterElement;
    'app-fullscreen-info': HTMLAppFullscreenInfoElement;
    'app-get-help': HTMLAppGetHelpElement;
    'app-gif': HTMLAppGifElement;
    'app-help-action': HTMLAppHelpActionElement;
    'app-home': HTMLAppHomeElement;
    'app-image': HTMLAppImageElement;
    'app-image-columns': HTMLAppImageColumnsElement;
    'app-info-images': HTMLAppInfoImagesElement;
    'app-logo': HTMLAppLogoElement;
    'app-menu': HTMLAppMenuElement;
    'app-more-actions': HTMLAppMoreActionsElement;
    'app-more-share-options': HTMLAppMoreShareOptionsElement;
    'app-navigation': HTMLAppNavigationElement;
    'app-navigation-actions': HTMLAppNavigationActionsElement;
    'app-newsletter': HTMLAppNewsletterElement;
    'app-opensource': HTMLAppOpensourceElement;
    'app-photo': HTMLAppPhotoElement;
    'app-popular': HTMLAppPopularElement;
    'app-privacy': HTMLAppPrivacyElement;
    'app-publish': HTMLAppPublishElement;
    'app-publish-done': HTMLAppPublishDoneElement;
    'app-publish-edit': HTMLAppPublishEditElement;
    'app-remote': HTMLAppRemoteElement;
    'app-root': HTMLAppRootElement;
    'app-services': HTMLAppServicesElement;
    'app-settings': HTMLAppSettingsElement;
    'app-share-action': HTMLAppShareActionElement;
    'app-share-deck': HTMLAppShareDeckElement;
    'app-share-options': HTMLAppShareOptionsElement;
    'app-signin': HTMLAppSigninElement;
    'app-slide-navigate': HTMLAppSlideNavigateElement;
    'app-slide-type': HTMLAppSlideTypeElement;
    'app-slot-type': HTMLAppSlotTypeElement;
    'app-team': HTMLAppTeamElement;
    'app-terms': HTMLAppTermsElement;
    'app-user-delete': HTMLAppUserDeleteElement;
    'app-user-info': HTMLAppUserInfoElement;
    'app-user-menu': HTMLAppUserMenuElement;
  }
}

declare namespace LocalJSX {
  interface AppAbout extends JSXBase.HTMLAttributes<HTMLAppAboutElement> {}
  interface AppAddSlideAction extends JSXBase.HTMLAttributes<HTMLAppAddSlideActionElement> {
    'onActionOpenSlideAdd'?: (event: CustomEvent<UIEvent>) => void;
  }
  interface AppAvatar extends JSXBase.HTMLAttributes<HTMLAppAvatarElement> {
    'src'?: string;
  }
  interface AppCode extends JSXBase.HTMLAttributes<HTMLAppCodeElement> {
    'codeDidChange'?: EventEmitter<HTMLElement>;
    'selectedElement'?: HTMLElement;
  }
  interface AppColor extends JSXBase.HTMLAttributes<HTMLAppColorElement> {
    'background'?: string;
    'color'?: string;
    'deckOrSlide'?: boolean;
    'onColorDidChange'?: (event: CustomEvent<HTMLElement>) => void;
    'selectedElement'?: HTMLElement;
  }
  interface AppContact extends JSXBase.HTMLAttributes<HTMLAppContactElement> {}
  interface AppCustomImages extends JSXBase.HTMLAttributes<HTMLAppCustomImagesElement> {}
  interface AppDeckOrSlide extends JSXBase.HTMLAttributes<HTMLAppDeckOrSlideElement> {
    'deckOrSlide'?: boolean;
    'onApplyTo'?: (event: CustomEvent<boolean>) => void;
  }
  interface AppDeveloper extends JSXBase.HTMLAttributes<HTMLAppDeveloperElement> {}
  interface AppEditor extends JSXBase.HTMLAttributes<HTMLAppEditorElement> {
    'deckId'?: string;
  }
  interface AppEditorActions extends JSXBase.HTMLAttributes<HTMLAppEditorActionsElement> {
    'fullscreen'?: boolean;
    'hideFooterActions'?: boolean;
    'onActionPublish'?: (event: CustomEvent<void>) => void;
    'onAddSlide'?: (event: CustomEvent<any>) => void;
    'onAnimatePrevNextSlide'?: (event: CustomEvent<boolean>) => void;
    'onOpenShare'?: (event: CustomEvent<void>) => void;
    'onSignIn'?: (event: CustomEvent<void>) => void;
    'onSlideTo'?: (event: CustomEvent<number>) => void;
    'onToggleFullScreen'?: (event: CustomEvent<void>) => void;
    'slides'?: any[];
  }
  interface AppEditorToolbar extends JSXBase.HTMLAttributes<HTMLAppEditorToolbarElement> {
    'onBlockSlide'?: (event: CustomEvent<boolean>) => void;
    'onCodeDidChange'?: (event: CustomEvent<HTMLElement>) => void;
    'onDeckDidChange'?: (event: CustomEvent<HTMLElement>) => void;
    'onSignIn'?: (event: CustomEvent<void>) => void;
    'onSlideDelete'?: (event: CustomEvent<HTMLElement>) => void;
    'onSlideDidChange'?: (event: CustomEvent<HTMLElement>) => void;
  }
  interface AppFeed extends JSXBase.HTMLAttributes<HTMLAppFeedElement> {}
  interface AppFeedCard extends JSXBase.HTMLAttributes<HTMLAppFeedCardElement> {
    'compact'?: boolean;
    'deck'?: Deck;
  }
  interface AppFeedCardTags extends JSXBase.HTMLAttributes<HTMLAppFeedCardTagsElement> {
    'disableRemove'?: boolean;
    'editable'?: boolean;
    'onRemoveTag'?: (event: CustomEvent<string>) => void;
    'tags'?: string[];
  }
  interface AppFooter extends JSXBase.HTMLAttributes<HTMLAppFooterElement> {}
  interface AppFullscreenInfo extends JSXBase.HTMLAttributes<HTMLAppFullscreenInfoElement> {}
  interface AppGetHelp extends JSXBase.HTMLAttributes<HTMLAppGetHelpElement> {}
  interface AppGif extends JSXBase.HTMLAttributes<HTMLAppGifElement> {}
  interface AppHelpAction extends JSXBase.HTMLAttributes<HTMLAppHelpActionElement> {}
  interface AppHome extends JSXBase.HTMLAttributes<HTMLAppHomeElement> {}
  interface AppImage extends JSXBase.HTMLAttributes<HTMLAppImageElement> {
    'deckOrSlide'?: boolean;
  }
  interface AppImageColumns extends JSXBase.HTMLAttributes<HTMLAppImageColumnsElement> {
    'imagesEven'?: (UnsplashPhoto | TenorGif | StorageFile)[];
    'imagesOdd'?: (UnsplashPhoto | TenorGif | StorageFile)[];
    'onSelectImage'?: (event: CustomEvent<UnsplashPhoto | TenorGif | StorageFile>) => void;
  }
  interface AppInfoImages extends JSXBase.HTMLAttributes<HTMLAppInfoImagesElement> {}
  interface AppLogo extends JSXBase.HTMLAttributes<HTMLAppLogoElement> {}
  interface AppMenu extends JSXBase.HTMLAttributes<HTMLAppMenuElement> {}
  interface AppMoreActions extends JSXBase.HTMLAttributes<HTMLAppMoreActionsElement> {}
  interface AppMoreShareOptions extends JSXBase.HTMLAttributes<HTMLAppMoreShareOptionsElement> {}
  interface AppNavigation extends JSXBase.HTMLAttributes<HTMLAppNavigationElement> {
    'menuToggle'?: boolean;
    'presentation'?: boolean;
    'publish'?: boolean;
    'user'?: boolean;
  }
  interface AppNavigationActions extends JSXBase.HTMLAttributes<HTMLAppNavigationActionsElement> {
    'onActionPublish'?: (event: CustomEvent<void>) => void;
    'presentation'?: boolean;
    'publish'?: boolean;
    'signIn'?: boolean;
  }
  interface AppNewsletter extends JSXBase.HTMLAttributes<HTMLAppNewsletterElement> {}
  interface AppOpensource extends JSXBase.HTMLAttributes<HTMLAppOpensourceElement> {}
  interface AppPhoto extends JSXBase.HTMLAttributes<HTMLAppPhotoElement> {}
  interface AppPopular extends JSXBase.HTMLAttributes<HTMLAppPopularElement> {}
  interface AppPrivacy extends JSXBase.HTMLAttributes<HTMLAppPrivacyElement> {}
  interface AppPublish extends JSXBase.HTMLAttributes<HTMLAppPublishElement> {}
  interface AppPublishDone extends JSXBase.HTMLAttributes<HTMLAppPublishDoneElement> {
    'onOpenShare'?: (event: CustomEvent<void>) => void;
    'publishedUrl'?: string;
  }
  interface AppPublishEdit extends JSXBase.HTMLAttributes<HTMLAppPublishEditElement> {
    'onPublished'?: (event: CustomEvent<string>) => void;
  }
  interface AppRemote extends JSXBase.HTMLAttributes<HTMLAppRemoteElement> {}
  interface AppRoot extends JSXBase.HTMLAttributes<HTMLAppRootElement> {}
  interface AppServices extends JSXBase.HTMLAttributes<HTMLAppServicesElement> {}
  interface AppSettings extends JSXBase.HTMLAttributes<HTMLAppSettingsElement> {}
  interface AppShareAction extends JSXBase.HTMLAttributes<HTMLAppShareActionElement> {
    'onActionPublish'?: (event: CustomEvent<void>) => void;
    'onOpenShare'?: (event: CustomEvent<void>) => void;
  }
  interface AppShareDeck extends JSXBase.HTMLAttributes<HTMLAppShareDeckElement> {}
  interface AppShareOptions extends JSXBase.HTMLAttributes<HTMLAppShareOptionsElement> {
    'onSelectedOption'?: (event: CustomEvent<MoreAction>) => void;
  }
  interface AppSignin extends JSXBase.HTMLAttributes<HTMLAppSigninElement> {
    'redirect'?: string;
    'redirectId'?: string;
  }
  interface AppSlideNavigate extends JSXBase.HTMLAttributes<HTMLAppSlideNavigateElement> {}
  interface AppSlideType extends JSXBase.HTMLAttributes<HTMLAppSlideTypeElement> {}
  interface AppSlotType extends JSXBase.HTMLAttributes<HTMLAppSlotTypeElement> {
    'selectedElement'?: HTMLElement;
  }
  interface AppTeam extends JSXBase.HTMLAttributes<HTMLAppTeamElement> {}
  interface AppTerms extends JSXBase.HTMLAttributes<HTMLAppTermsElement> {}
  interface AppUserDelete extends JSXBase.HTMLAttributes<HTMLAppUserDeleteElement> {
    'username'?: string;
  }
  interface AppUserInfo extends JSXBase.HTMLAttributes<HTMLAppUserInfoElement> {
    'avatarColSize'?: number;
  }
  interface AppUserMenu extends JSXBase.HTMLAttributes<HTMLAppUserMenuElement> {}

  interface IntrinsicElements {
    'app-about': AppAbout;
    'app-add-slide-action': AppAddSlideAction;
    'app-avatar': AppAvatar;
    'app-code': AppCode;
    'app-color': AppColor;
    'app-contact': AppContact;
    'app-custom-images': AppCustomImages;
    'app-deck-or-slide': AppDeckOrSlide;
    'app-developer': AppDeveloper;
    'app-editor': AppEditor;
    'app-editor-actions': AppEditorActions;
    'app-editor-toolbar': AppEditorToolbar;
    'app-feed': AppFeed;
    'app-feed-card': AppFeedCard;
    'app-feed-card-tags': AppFeedCardTags;
    'app-footer': AppFooter;
    'app-fullscreen-info': AppFullscreenInfo;
    'app-get-help': AppGetHelp;
    'app-gif': AppGif;
    'app-help-action': AppHelpAction;
    'app-home': AppHome;
    'app-image': AppImage;
    'app-image-columns': AppImageColumns;
    'app-info-images': AppInfoImages;
    'app-logo': AppLogo;
    'app-menu': AppMenu;
    'app-more-actions': AppMoreActions;
    'app-more-share-options': AppMoreShareOptions;
    'app-navigation': AppNavigation;
    'app-navigation-actions': AppNavigationActions;
    'app-newsletter': AppNewsletter;
    'app-opensource': AppOpensource;
    'app-photo': AppPhoto;
    'app-popular': AppPopular;
    'app-privacy': AppPrivacy;
    'app-publish': AppPublish;
    'app-publish-done': AppPublishDone;
    'app-publish-edit': AppPublishEdit;
    'app-remote': AppRemote;
    'app-root': AppRoot;
    'app-services': AppServices;
    'app-settings': AppSettings;
    'app-share-action': AppShareAction;
    'app-share-deck': AppShareDeck;
    'app-share-options': AppShareOptions;
    'app-signin': AppSignin;
    'app-slide-navigate': AppSlideNavigate;
    'app-slide-type': AppSlideType;
    'app-slot-type': AppSlotType;
    'app-team': AppTeam;
    'app-terms': AppTerms;
    'app-user-delete': AppUserDelete;
    'app-user-info': AppUserInfo;
    'app-user-menu': AppUserMenu;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


