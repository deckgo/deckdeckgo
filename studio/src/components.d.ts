/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { EventEmitter, JSX } from "@stencil/core";
import { SelectedElement } from "./app/types/editor/selected-element";
import { PrismLanguage } from "./app/types/editor/prism-language";
import { InitStyleColor } from "./app/utils/editor/color.utils";
import { Deck } from "./app/models/data/deck";
import { DeckDashboardCloneResult } from "./app/services/deck/deck-dashboard.service";
import { DeckAction } from "./app/types/editor/deck-action";
import { EditAction } from "./app/types/editor/edit-action";
import { ImageHelper } from "./app/helpers/editor/image.helper";
import { Expanded } from "./app/types/core/settings";
import { ImageAction } from "./app/types/editor/image-action";
import { SlotType } from "./app/types/editor/slot-type";
import { ListStyle } from "./app/types/editor/list-style";
import { TargetElement } from "./app/types/editor/target-element";
import { MoreAction } from "./app/types/editor/more-action";
import { ItemReorderEventDetail } from "@ionic/core";
import { Template } from "./app/models/data/template";
import { SlideAttributes, SlideTemplate } from "./app/models/data/slide";
import { InitTemplate } from "./app/utils/editor/create-slides.utils";
export namespace Components {
    interface AppActionAddSlide {
        "addSlide": EventEmitter;
        "blockSlide": EventEmitter;
        "signIn": EventEmitter;
        "slides": JSX.IntrinsicElements[];
    }
    interface AppActionBusy {
        "iconSrc": string;
    }
    interface AppActionHelp {
        "link": boolean;
    }
    interface AppActionShare {
    }
    interface AppActionsDeck {
        "actionPublish": EventEmitter;
        "addSlide": EventEmitter;
        "animatePrevNextSlide": EventEmitter;
        "blockSlide": EventEmitter;
        "deckDidChange": EventEmitter;
        "fullscreen": boolean;
        "signIn": EventEmitter;
        "slideTo": EventEmitter;
        "slides": JSX.IntrinsicElements[];
        "toggleFullScreen": EventEmitter;
    }
    interface AppActionsEditor {
        "fullscreen": boolean;
        "hideActions": boolean;
        "selectDeck": () => Promise<void>;
        "selectStep": (element: HTMLElement | undefined) => Promise<void>;
        "slideNumber": number;
        "slides": JSX.IntrinsicElements[];
        "touch": (element: HTMLElement, autoOpen?: boolean) => Promise<void>;
    }
    interface AppActionsElement {
        "blurSelectedElement": () => Promise<void>;
        "elementFocus": EventEmitter;
        "reset": () => Promise<void>;
        "slideCopy": EventEmitter;
        "slideTransform": EventEmitter;
        "touch": (element: HTMLElement | undefined, autoOpen?: boolean) => Promise<void>;
        "unSelect": () => Promise<void>;
    }
    interface AppAvatar {
        "ariaLabel": string;
        "src": string;
    }
    interface AppBackgroundFolders {
    }
    interface AppBlock {
        "selectedElement": SelectedElement;
    }
    interface AppBorderRadius {
        "selectedElement": SelectedElement;
    }
    interface AppBottomSheet {
    }
    interface AppBoxShadow {
        "selectedElement": SelectedElement;
    }
    interface AppBreadcrumbs {
        "slideNumber": number;
    }
    interface AppCloseMenu {
    }
    interface AppCode {
        "codeDidChange": EventEmitter<HTMLElement>;
        "selectedElement": HTMLElement;
    }
    interface AppCodeLanguages {
        "codeDidChange": EventEmitter<HTMLElement>;
        "currentLanguage": PrismLanguage | undefined;
        "selectedElement": HTMLElement;
    }
    interface AppColor {
        "defaultColor": string;
        "initColor": () => Promise<InitStyleColor>;
        "loadColor": () => Promise<void>;
    }
    interface AppColorChart {
        "selectedElement": HTMLElement;
    }
    interface AppColorCode {
        "selectedElement": HTMLElement;
    }
    interface AppColorQrcode {
        "selectedElement": HTMLElement;
    }
    interface AppColorSides {
        "selectedElement": HTMLElement;
        "template": 'split' | 'author';
    }
    interface AppColorTextBackground {
        "colorType": 'text' | 'background';
        "deck": boolean;
        "selectedElement": HTMLElement;
        "slide": boolean;
    }
    interface AppColorWordCloud {
        "selectedElement": HTMLElement;
    }
    interface AppCopyStyle {
        "selectedElement": HTMLElement;
    }
    interface AppCreateSlide {
    }
    interface AppCustomData {
    }
    interface AppCustomImages {
    }
    interface AppCustomization {
    }
    interface AppDashboard {
    }
    interface AppDashboardDeckActions {
        "deck": Deck;
    }
    interface AppDashboardPage {
    }
    interface AppDeckDelete {
        "deckName": string;
        "published": string;
    }
    interface AppDeckFonts {
        "deckElement": HTMLElement;
    }
    interface AppDeckHeaderFooter {
        "deckDidChange": EventEmitter<HTMLElement>;
        "deckElement": HTMLElement;
    }
    interface AppDeckImport {
    }
    interface AppDeckStyle {
        "blockSlide": EventEmitter<boolean>;
        "deckDidChange": EventEmitter<HTMLElement>;
        "signIn": EventEmitter<void>;
    }
    interface AppDeckTransition {
        "deckElement": HTMLDeckgoDeckElement;
    }
    interface AppDemo {
        "selectedElement": HTMLElement;
    }
    interface AppEditMode {
    }
    interface AppEditSlide {
        "selectedElement": SelectedElement;
        "slideDidChange": EventEmitter<HTMLElement>;
    }
    interface AppEditSlideAuthor {
        "selectedElement": HTMLElement;
        "slideDidChange": EventEmitter<HTMLElement>;
    }
    interface AppEditSlideChart {
        "selectedElement": HTMLElement;
        "slideDidChange": EventEmitter<HTMLElement>;
    }
    interface AppEditSlideQrcode {
        "selectedElement": HTMLElement;
        "slideDidChange": EventEmitter<HTMLElement>;
    }
    interface AppEditSlideUser {
        "selectedElement": SelectedElement;
        "slideDidChange": EventEmitter<HTMLElement>;
    }
    interface AppEditor {
        "deckId": string;
    }
    interface AppElementDelete {
    }
    interface AppElementStyle {
        "imageHelper": ImageHelper;
        "imgDidChange": EventEmitter<HTMLElement>;
        "selectedElement": SelectedElement;
    }
    interface AppEmbed {
    }
    interface AppExpansionPanel {
        "expanded": Expanded;
        "expander": boolean;
    }
    interface AppFullscreenInfo {
    }
    interface AppGetHelp {
    }
    interface AppGif {
    }
    interface AppGoOffline {
    }
    interface AppGoOnline {
    }
    interface AppImage {
        "deck": boolean;
        "deleteBackground": boolean;
        "selectedElement": HTMLElement;
        "slide": boolean;
    }
    interface AppImageColumns {
        "imagesEven": (UnsplashPhoto | TenorGif | StorageFile | Waves)[];
        "imagesOdd": (UnsplashPhoto | TenorGif | StorageFile | Waves)[];
    }
    interface AppImageElement {
        "selectedElement": HTMLElement;
        "slide": boolean;
    }
    interface AppImageStyle {
        "selectedElement": HTMLElement;
    }
    interface AppLinks {
    }
    interface AppList {
        "selectedElement": HTMLElement;
    }
    interface AppLogo {
    }
    interface AppMath {
        "mathDidChange": EventEmitter<HTMLElement>;
        "selectedElement": HTMLElement;
    }
    interface AppMenu {
    }
    interface AppMoreDeckActions {
        "offline": boolean;
    }
    interface AppMoreElementActions {
        "clone": boolean;
        "images": boolean;
        "notes": boolean;
        "transform": boolean;
    }
    interface AppMoreShareOptions {
    }
    interface AppNavigation {
        "menuToggle": boolean;
        "publish": boolean;
        "user": boolean;
        "write": boolean;
    }
    interface AppNavigationActions {
        "publish": boolean;
        "signIn": boolean;
        "write": boolean;
    }
    interface AppNoTemplates {
    }
    interface AppNotes {
        "selectedElement": HTMLElement;
    }
    interface AppOffline {
        "offline": boolean;
    }
    interface AppPhoto {
    }
    interface AppPlayground {
        "selectedElement": HTMLElement;
    }
    interface AppPlaygroundPlaceholder {
    }
    interface AppPoll {
        "pollKey": string;
    }
    interface AppPollOptions {
        "selectedElement": HTMLElement;
        "slideDidChange": EventEmitter<HTMLElement>;
    }
    interface AppPresent {
        "fullscreen": boolean;
    }
    interface AppProfile {
    }
    interface AppPublish {
    }
    interface AppPublishDone {
        "publishedUrl": string;
    }
    interface AppPublishEdit {
    }
    interface AppPublishTags {
        "disableRemove": boolean;
        "tags": string[];
    }
    interface AppRandomGif {
        "keyword": string;
    }
    interface AppRemoteConnect {
    }
    interface AppRemoteRequest {
    }
    interface AppReveal {
        "selectedElement": HTMLElement;
    }
    interface AppRoot {
    }
    interface AppSelectTargetElement {
        "chart": boolean;
        "code": boolean;
        "headerFooter": boolean;
        "image": boolean;
        "qrCode": boolean;
        "sides": boolean;
        "slide": boolean;
        "textTarget": boolean;
        "transition": boolean;
        "wordCloud": boolean;
    }
    interface AppShape {
        "selectedElement": HTMLElement;
    }
    interface AppShareDeck {
        "openShare": () => Promise<void>;
    }
    interface AppShareOptions {
    }
    interface AppSignin {
        "redirect": string;
        "redirectId": string;
    }
    interface AppSigninPage {
        "redirect": string;
        "redirectId": string;
    }
    interface AppSlideNavigate {
    }
    interface AppSlidePreview {
        "deckRef": HTMLDeckgoDeckElement;
    }
    interface AppSlideWarning {
    }
    interface AppSlideWarningInfo {
        "lowContrast": boolean;
        "overflow": boolean;
    }
    interface AppSlotType {
        "selectedElement": HTMLElement;
        "skip": boolean;
        "slotTypes": SlotType[] | undefined;
    }
    interface AppSpinner {
    }
    interface AppStartDeck {
        "importColor": 'dark' | 'light';
        "writeColor": 'primary' | 'dark' | 'light';
    }
    interface AppTemplate {
        "template": Template | undefined;
    }
    interface AppTemplateShowcase {
        "author": boolean;
        "editable": boolean;
        "template": Template;
    }
    interface AppTemplates {
    }
    interface AppTemplatesCharts {
    }
    interface AppTemplatesCommunity {
    }
    interface AppTemplatesContent {
        "highlight": boolean;
        "highlightIndex": number | undefined;
        "selected": boolean;
    }
    interface AppTemplatesDefault {
    }
    interface AppTemplatesSplit {
        "highlight": boolean;
        "highlightIndex": number | undefined;
        "selected": boolean;
        "vertical": boolean;
    }
    interface AppTemplatesTitle {
        "highlight": boolean;
        "highlightIndex": number | undefined;
        "selected": boolean;
    }
    interface AppTemplatesUser {
    }
    interface AppText {
        "selectedElement": SelectedElement;
    }
    interface AppTransformElement {
        "selectedElement": HTMLElement;
    }
    interface AppTransformSlide {
        "selectedElement": HTMLElement;
    }
    interface AppUnpublish {
    }
    interface AppUserDelete {
        "username": string;
    }
    interface AppUserInfo {
        "displayAvatar": boolean;
    }
    interface AppUserMenu {
    }
    interface AppWaves {
    }
    interface AppYoutube {
        "selectedElement": HTMLElement;
    }
}
declare global {
    interface HTMLAppActionAddSlideElement extends Components.AppActionAddSlide, HTMLStencilElement {
    }
    var HTMLAppActionAddSlideElement: {
        prototype: HTMLAppActionAddSlideElement;
        new (): HTMLAppActionAddSlideElement;
    };
    interface HTMLAppActionBusyElement extends Components.AppActionBusy, HTMLStencilElement {
    }
    var HTMLAppActionBusyElement: {
        prototype: HTMLAppActionBusyElement;
        new (): HTMLAppActionBusyElement;
    };
    interface HTMLAppActionHelpElement extends Components.AppActionHelp, HTMLStencilElement {
    }
    var HTMLAppActionHelpElement: {
        prototype: HTMLAppActionHelpElement;
        new (): HTMLAppActionHelpElement;
    };
    interface HTMLAppActionShareElement extends Components.AppActionShare, HTMLStencilElement {
    }
    var HTMLAppActionShareElement: {
        prototype: HTMLAppActionShareElement;
        new (): HTMLAppActionShareElement;
    };
    interface HTMLAppActionsDeckElement extends Components.AppActionsDeck, HTMLStencilElement {
    }
    var HTMLAppActionsDeckElement: {
        prototype: HTMLAppActionsDeckElement;
        new (): HTMLAppActionsDeckElement;
    };
    interface HTMLAppActionsEditorElement extends Components.AppActionsEditor, HTMLStencilElement {
    }
    var HTMLAppActionsEditorElement: {
        prototype: HTMLAppActionsEditorElement;
        new (): HTMLAppActionsEditorElement;
    };
    interface HTMLAppActionsElementElement extends Components.AppActionsElement, HTMLStencilElement {
    }
    var HTMLAppActionsElementElement: {
        prototype: HTMLAppActionsElementElement;
        new (): HTMLAppActionsElementElement;
    };
    interface HTMLAppAvatarElement extends Components.AppAvatar, HTMLStencilElement {
    }
    var HTMLAppAvatarElement: {
        prototype: HTMLAppAvatarElement;
        new (): HTMLAppAvatarElement;
    };
    interface HTMLAppBackgroundFoldersElement extends Components.AppBackgroundFolders, HTMLStencilElement {
    }
    var HTMLAppBackgroundFoldersElement: {
        prototype: HTMLAppBackgroundFoldersElement;
        new (): HTMLAppBackgroundFoldersElement;
    };
    interface HTMLAppBlockElement extends Components.AppBlock, HTMLStencilElement {
    }
    var HTMLAppBlockElement: {
        prototype: HTMLAppBlockElement;
        new (): HTMLAppBlockElement;
    };
    interface HTMLAppBorderRadiusElement extends Components.AppBorderRadius, HTMLStencilElement {
    }
    var HTMLAppBorderRadiusElement: {
        prototype: HTMLAppBorderRadiusElement;
        new (): HTMLAppBorderRadiusElement;
    };
    interface HTMLAppBottomSheetElement extends Components.AppBottomSheet, HTMLStencilElement {
    }
    var HTMLAppBottomSheetElement: {
        prototype: HTMLAppBottomSheetElement;
        new (): HTMLAppBottomSheetElement;
    };
    interface HTMLAppBoxShadowElement extends Components.AppBoxShadow, HTMLStencilElement {
    }
    var HTMLAppBoxShadowElement: {
        prototype: HTMLAppBoxShadowElement;
        new (): HTMLAppBoxShadowElement;
    };
    interface HTMLAppBreadcrumbsElement extends Components.AppBreadcrumbs, HTMLStencilElement {
    }
    var HTMLAppBreadcrumbsElement: {
        prototype: HTMLAppBreadcrumbsElement;
        new (): HTMLAppBreadcrumbsElement;
    };
    interface HTMLAppCloseMenuElement extends Components.AppCloseMenu, HTMLStencilElement {
    }
    var HTMLAppCloseMenuElement: {
        prototype: HTMLAppCloseMenuElement;
        new (): HTMLAppCloseMenuElement;
    };
    interface HTMLAppCodeElement extends Components.AppCode, HTMLStencilElement {
    }
    var HTMLAppCodeElement: {
        prototype: HTMLAppCodeElement;
        new (): HTMLAppCodeElement;
    };
    interface HTMLAppCodeLanguagesElement extends Components.AppCodeLanguages, HTMLStencilElement {
    }
    var HTMLAppCodeLanguagesElement: {
        prototype: HTMLAppCodeLanguagesElement;
        new (): HTMLAppCodeLanguagesElement;
    };
    interface HTMLAppColorElement extends Components.AppColor, HTMLStencilElement {
    }
    var HTMLAppColorElement: {
        prototype: HTMLAppColorElement;
        new (): HTMLAppColorElement;
    };
    interface HTMLAppColorChartElement extends Components.AppColorChart, HTMLStencilElement {
    }
    var HTMLAppColorChartElement: {
        prototype: HTMLAppColorChartElement;
        new (): HTMLAppColorChartElement;
    };
    interface HTMLAppColorCodeElement extends Components.AppColorCode, HTMLStencilElement {
    }
    var HTMLAppColorCodeElement: {
        prototype: HTMLAppColorCodeElement;
        new (): HTMLAppColorCodeElement;
    };
    interface HTMLAppColorQrcodeElement extends Components.AppColorQrcode, HTMLStencilElement {
    }
    var HTMLAppColorQrcodeElement: {
        prototype: HTMLAppColorQrcodeElement;
        new (): HTMLAppColorQrcodeElement;
    };
    interface HTMLAppColorSidesElement extends Components.AppColorSides, HTMLStencilElement {
    }
    var HTMLAppColorSidesElement: {
        prototype: HTMLAppColorSidesElement;
        new (): HTMLAppColorSidesElement;
    };
    interface HTMLAppColorTextBackgroundElement extends Components.AppColorTextBackground, HTMLStencilElement {
    }
    var HTMLAppColorTextBackgroundElement: {
        prototype: HTMLAppColorTextBackgroundElement;
        new (): HTMLAppColorTextBackgroundElement;
    };
    interface HTMLAppColorWordCloudElement extends Components.AppColorWordCloud, HTMLStencilElement {
    }
    var HTMLAppColorWordCloudElement: {
        prototype: HTMLAppColorWordCloudElement;
        new (): HTMLAppColorWordCloudElement;
    };
    interface HTMLAppCopyStyleElement extends Components.AppCopyStyle, HTMLStencilElement {
    }
    var HTMLAppCopyStyleElement: {
        prototype: HTMLAppCopyStyleElement;
        new (): HTMLAppCopyStyleElement;
    };
    interface HTMLAppCreateSlideElement extends Components.AppCreateSlide, HTMLStencilElement {
    }
    var HTMLAppCreateSlideElement: {
        prototype: HTMLAppCreateSlideElement;
        new (): HTMLAppCreateSlideElement;
    };
    interface HTMLAppCustomDataElement extends Components.AppCustomData, HTMLStencilElement {
    }
    var HTMLAppCustomDataElement: {
        prototype: HTMLAppCustomDataElement;
        new (): HTMLAppCustomDataElement;
    };
    interface HTMLAppCustomImagesElement extends Components.AppCustomImages, HTMLStencilElement {
    }
    var HTMLAppCustomImagesElement: {
        prototype: HTMLAppCustomImagesElement;
        new (): HTMLAppCustomImagesElement;
    };
    interface HTMLAppCustomizationElement extends Components.AppCustomization, HTMLStencilElement {
    }
    var HTMLAppCustomizationElement: {
        prototype: HTMLAppCustomizationElement;
        new (): HTMLAppCustomizationElement;
    };
    interface HTMLAppDashboardElement extends Components.AppDashboard, HTMLStencilElement {
    }
    var HTMLAppDashboardElement: {
        prototype: HTMLAppDashboardElement;
        new (): HTMLAppDashboardElement;
    };
    interface HTMLAppDashboardDeckActionsElement extends Components.AppDashboardDeckActions, HTMLStencilElement {
    }
    var HTMLAppDashboardDeckActionsElement: {
        prototype: HTMLAppDashboardDeckActionsElement;
        new (): HTMLAppDashboardDeckActionsElement;
    };
    interface HTMLAppDashboardPageElement extends Components.AppDashboardPage, HTMLStencilElement {
    }
    var HTMLAppDashboardPageElement: {
        prototype: HTMLAppDashboardPageElement;
        new (): HTMLAppDashboardPageElement;
    };
    interface HTMLAppDeckDeleteElement extends Components.AppDeckDelete, HTMLStencilElement {
    }
    var HTMLAppDeckDeleteElement: {
        prototype: HTMLAppDeckDeleteElement;
        new (): HTMLAppDeckDeleteElement;
    };
    interface HTMLAppDeckFontsElement extends Components.AppDeckFonts, HTMLStencilElement {
    }
    var HTMLAppDeckFontsElement: {
        prototype: HTMLAppDeckFontsElement;
        new (): HTMLAppDeckFontsElement;
    };
    interface HTMLAppDeckHeaderFooterElement extends Components.AppDeckHeaderFooter, HTMLStencilElement {
    }
    var HTMLAppDeckHeaderFooterElement: {
        prototype: HTMLAppDeckHeaderFooterElement;
        new (): HTMLAppDeckHeaderFooterElement;
    };
    interface HTMLAppDeckImportElement extends Components.AppDeckImport, HTMLStencilElement {
    }
    var HTMLAppDeckImportElement: {
        prototype: HTMLAppDeckImportElement;
        new (): HTMLAppDeckImportElement;
    };
    interface HTMLAppDeckStyleElement extends Components.AppDeckStyle, HTMLStencilElement {
    }
    var HTMLAppDeckStyleElement: {
        prototype: HTMLAppDeckStyleElement;
        new (): HTMLAppDeckStyleElement;
    };
    interface HTMLAppDeckTransitionElement extends Components.AppDeckTransition, HTMLStencilElement {
    }
    var HTMLAppDeckTransitionElement: {
        prototype: HTMLAppDeckTransitionElement;
        new (): HTMLAppDeckTransitionElement;
    };
    interface HTMLAppDemoElement extends Components.AppDemo, HTMLStencilElement {
    }
    var HTMLAppDemoElement: {
        prototype: HTMLAppDemoElement;
        new (): HTMLAppDemoElement;
    };
    interface HTMLAppEditModeElement extends Components.AppEditMode, HTMLStencilElement {
    }
    var HTMLAppEditModeElement: {
        prototype: HTMLAppEditModeElement;
        new (): HTMLAppEditModeElement;
    };
    interface HTMLAppEditSlideElement extends Components.AppEditSlide, HTMLStencilElement {
    }
    var HTMLAppEditSlideElement: {
        prototype: HTMLAppEditSlideElement;
        new (): HTMLAppEditSlideElement;
    };
    interface HTMLAppEditSlideAuthorElement extends Components.AppEditSlideAuthor, HTMLStencilElement {
    }
    var HTMLAppEditSlideAuthorElement: {
        prototype: HTMLAppEditSlideAuthorElement;
        new (): HTMLAppEditSlideAuthorElement;
    };
    interface HTMLAppEditSlideChartElement extends Components.AppEditSlideChart, HTMLStencilElement {
    }
    var HTMLAppEditSlideChartElement: {
        prototype: HTMLAppEditSlideChartElement;
        new (): HTMLAppEditSlideChartElement;
    };
    interface HTMLAppEditSlideQrcodeElement extends Components.AppEditSlideQrcode, HTMLStencilElement {
    }
    var HTMLAppEditSlideQrcodeElement: {
        prototype: HTMLAppEditSlideQrcodeElement;
        new (): HTMLAppEditSlideQrcodeElement;
    };
    interface HTMLAppEditSlideUserElement extends Components.AppEditSlideUser, HTMLStencilElement {
    }
    var HTMLAppEditSlideUserElement: {
        prototype: HTMLAppEditSlideUserElement;
        new (): HTMLAppEditSlideUserElement;
    };
    interface HTMLAppEditorElement extends Components.AppEditor, HTMLStencilElement {
    }
    var HTMLAppEditorElement: {
        prototype: HTMLAppEditorElement;
        new (): HTMLAppEditorElement;
    };
    interface HTMLAppElementDeleteElement extends Components.AppElementDelete, HTMLStencilElement {
    }
    var HTMLAppElementDeleteElement: {
        prototype: HTMLAppElementDeleteElement;
        new (): HTMLAppElementDeleteElement;
    };
    interface HTMLAppElementStyleElement extends Components.AppElementStyle, HTMLStencilElement {
    }
    var HTMLAppElementStyleElement: {
        prototype: HTMLAppElementStyleElement;
        new (): HTMLAppElementStyleElement;
    };
    interface HTMLAppEmbedElement extends Components.AppEmbed, HTMLStencilElement {
    }
    var HTMLAppEmbedElement: {
        prototype: HTMLAppEmbedElement;
        new (): HTMLAppEmbedElement;
    };
    interface HTMLAppExpansionPanelElement extends Components.AppExpansionPanel, HTMLStencilElement {
    }
    var HTMLAppExpansionPanelElement: {
        prototype: HTMLAppExpansionPanelElement;
        new (): HTMLAppExpansionPanelElement;
    };
    interface HTMLAppFullscreenInfoElement extends Components.AppFullscreenInfo, HTMLStencilElement {
    }
    var HTMLAppFullscreenInfoElement: {
        prototype: HTMLAppFullscreenInfoElement;
        new (): HTMLAppFullscreenInfoElement;
    };
    interface HTMLAppGetHelpElement extends Components.AppGetHelp, HTMLStencilElement {
    }
    var HTMLAppGetHelpElement: {
        prototype: HTMLAppGetHelpElement;
        new (): HTMLAppGetHelpElement;
    };
    interface HTMLAppGifElement extends Components.AppGif, HTMLStencilElement {
    }
    var HTMLAppGifElement: {
        prototype: HTMLAppGifElement;
        new (): HTMLAppGifElement;
    };
    interface HTMLAppGoOfflineElement extends Components.AppGoOffline, HTMLStencilElement {
    }
    var HTMLAppGoOfflineElement: {
        prototype: HTMLAppGoOfflineElement;
        new (): HTMLAppGoOfflineElement;
    };
    interface HTMLAppGoOnlineElement extends Components.AppGoOnline, HTMLStencilElement {
    }
    var HTMLAppGoOnlineElement: {
        prototype: HTMLAppGoOnlineElement;
        new (): HTMLAppGoOnlineElement;
    };
    interface HTMLAppImageElement extends Components.AppImage, HTMLStencilElement {
    }
    var HTMLAppImageElement: {
        prototype: HTMLAppImageElement;
        new (): HTMLAppImageElement;
    };
    interface HTMLAppImageColumnsElement extends Components.AppImageColumns, HTMLStencilElement {
    }
    var HTMLAppImageColumnsElement: {
        prototype: HTMLAppImageColumnsElement;
        new (): HTMLAppImageColumnsElement;
    };
    interface HTMLAppImageElementElement extends Components.AppImageElement, HTMLStencilElement {
    }
    var HTMLAppImageElementElement: {
        prototype: HTMLAppImageElementElement;
        new (): HTMLAppImageElementElement;
    };
    interface HTMLAppImageStyleElement extends Components.AppImageStyle, HTMLStencilElement {
    }
    var HTMLAppImageStyleElement: {
        prototype: HTMLAppImageStyleElement;
        new (): HTMLAppImageStyleElement;
    };
    interface HTMLAppLinksElement extends Components.AppLinks, HTMLStencilElement {
    }
    var HTMLAppLinksElement: {
        prototype: HTMLAppLinksElement;
        new (): HTMLAppLinksElement;
    };
    interface HTMLAppListElement extends Components.AppList, HTMLStencilElement {
    }
    var HTMLAppListElement: {
        prototype: HTMLAppListElement;
        new (): HTMLAppListElement;
    };
    interface HTMLAppLogoElement extends Components.AppLogo, HTMLStencilElement {
    }
    var HTMLAppLogoElement: {
        prototype: HTMLAppLogoElement;
        new (): HTMLAppLogoElement;
    };
    interface HTMLAppMathElement extends Components.AppMath, HTMLStencilElement {
    }
    var HTMLAppMathElement: {
        prototype: HTMLAppMathElement;
        new (): HTMLAppMathElement;
    };
    interface HTMLAppMenuElement extends Components.AppMenu, HTMLStencilElement {
    }
    var HTMLAppMenuElement: {
        prototype: HTMLAppMenuElement;
        new (): HTMLAppMenuElement;
    };
    interface HTMLAppMoreDeckActionsElement extends Components.AppMoreDeckActions, HTMLStencilElement {
    }
    var HTMLAppMoreDeckActionsElement: {
        prototype: HTMLAppMoreDeckActionsElement;
        new (): HTMLAppMoreDeckActionsElement;
    };
    interface HTMLAppMoreElementActionsElement extends Components.AppMoreElementActions, HTMLStencilElement {
    }
    var HTMLAppMoreElementActionsElement: {
        prototype: HTMLAppMoreElementActionsElement;
        new (): HTMLAppMoreElementActionsElement;
    };
    interface HTMLAppMoreShareOptionsElement extends Components.AppMoreShareOptions, HTMLStencilElement {
    }
    var HTMLAppMoreShareOptionsElement: {
        prototype: HTMLAppMoreShareOptionsElement;
        new (): HTMLAppMoreShareOptionsElement;
    };
    interface HTMLAppNavigationElement extends Components.AppNavigation, HTMLStencilElement {
    }
    var HTMLAppNavigationElement: {
        prototype: HTMLAppNavigationElement;
        new (): HTMLAppNavigationElement;
    };
    interface HTMLAppNavigationActionsElement extends Components.AppNavigationActions, HTMLStencilElement {
    }
    var HTMLAppNavigationActionsElement: {
        prototype: HTMLAppNavigationActionsElement;
        new (): HTMLAppNavigationActionsElement;
    };
    interface HTMLAppNoTemplatesElement extends Components.AppNoTemplates, HTMLStencilElement {
    }
    var HTMLAppNoTemplatesElement: {
        prototype: HTMLAppNoTemplatesElement;
        new (): HTMLAppNoTemplatesElement;
    };
    interface HTMLAppNotesElement extends Components.AppNotes, HTMLStencilElement {
    }
    var HTMLAppNotesElement: {
        prototype: HTMLAppNotesElement;
        new (): HTMLAppNotesElement;
    };
    interface HTMLAppOfflineElement extends Components.AppOffline, HTMLStencilElement {
    }
    var HTMLAppOfflineElement: {
        prototype: HTMLAppOfflineElement;
        new (): HTMLAppOfflineElement;
    };
    interface HTMLAppPhotoElement extends Components.AppPhoto, HTMLStencilElement {
    }
    var HTMLAppPhotoElement: {
        prototype: HTMLAppPhotoElement;
        new (): HTMLAppPhotoElement;
    };
    interface HTMLAppPlaygroundElement extends Components.AppPlayground, HTMLStencilElement {
    }
    var HTMLAppPlaygroundElement: {
        prototype: HTMLAppPlaygroundElement;
        new (): HTMLAppPlaygroundElement;
    };
    interface HTMLAppPlaygroundPlaceholderElement extends Components.AppPlaygroundPlaceholder, HTMLStencilElement {
    }
    var HTMLAppPlaygroundPlaceholderElement: {
        prototype: HTMLAppPlaygroundPlaceholderElement;
        new (): HTMLAppPlaygroundPlaceholderElement;
    };
    interface HTMLAppPollElement extends Components.AppPoll, HTMLStencilElement {
    }
    var HTMLAppPollElement: {
        prototype: HTMLAppPollElement;
        new (): HTMLAppPollElement;
    };
    interface HTMLAppPollOptionsElement extends Components.AppPollOptions, HTMLStencilElement {
    }
    var HTMLAppPollOptionsElement: {
        prototype: HTMLAppPollOptionsElement;
        new (): HTMLAppPollOptionsElement;
    };
    interface HTMLAppPresentElement extends Components.AppPresent, HTMLStencilElement {
    }
    var HTMLAppPresentElement: {
        prototype: HTMLAppPresentElement;
        new (): HTMLAppPresentElement;
    };
    interface HTMLAppProfileElement extends Components.AppProfile, HTMLStencilElement {
    }
    var HTMLAppProfileElement: {
        prototype: HTMLAppProfileElement;
        new (): HTMLAppProfileElement;
    };
    interface HTMLAppPublishElement extends Components.AppPublish, HTMLStencilElement {
    }
    var HTMLAppPublishElement: {
        prototype: HTMLAppPublishElement;
        new (): HTMLAppPublishElement;
    };
    interface HTMLAppPublishDoneElement extends Components.AppPublishDone, HTMLStencilElement {
    }
    var HTMLAppPublishDoneElement: {
        prototype: HTMLAppPublishDoneElement;
        new (): HTMLAppPublishDoneElement;
    };
    interface HTMLAppPublishEditElement extends Components.AppPublishEdit, HTMLStencilElement {
    }
    var HTMLAppPublishEditElement: {
        prototype: HTMLAppPublishEditElement;
        new (): HTMLAppPublishEditElement;
    };
    interface HTMLAppPublishTagsElement extends Components.AppPublishTags, HTMLStencilElement {
    }
    var HTMLAppPublishTagsElement: {
        prototype: HTMLAppPublishTagsElement;
        new (): HTMLAppPublishTagsElement;
    };
    interface HTMLAppRandomGifElement extends Components.AppRandomGif, HTMLStencilElement {
    }
    var HTMLAppRandomGifElement: {
        prototype: HTMLAppRandomGifElement;
        new (): HTMLAppRandomGifElement;
    };
    interface HTMLAppRemoteConnectElement extends Components.AppRemoteConnect, HTMLStencilElement {
    }
    var HTMLAppRemoteConnectElement: {
        prototype: HTMLAppRemoteConnectElement;
        new (): HTMLAppRemoteConnectElement;
    };
    interface HTMLAppRemoteRequestElement extends Components.AppRemoteRequest, HTMLStencilElement {
    }
    var HTMLAppRemoteRequestElement: {
        prototype: HTMLAppRemoteRequestElement;
        new (): HTMLAppRemoteRequestElement;
    };
    interface HTMLAppRevealElement extends Components.AppReveal, HTMLStencilElement {
    }
    var HTMLAppRevealElement: {
        prototype: HTMLAppRevealElement;
        new (): HTMLAppRevealElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLAppSelectTargetElementElement extends Components.AppSelectTargetElement, HTMLStencilElement {
    }
    var HTMLAppSelectTargetElementElement: {
        prototype: HTMLAppSelectTargetElementElement;
        new (): HTMLAppSelectTargetElementElement;
    };
    interface HTMLAppShapeElement extends Components.AppShape, HTMLStencilElement {
    }
    var HTMLAppShapeElement: {
        prototype: HTMLAppShapeElement;
        new (): HTMLAppShapeElement;
    };
    interface HTMLAppShareDeckElement extends Components.AppShareDeck, HTMLStencilElement {
    }
    var HTMLAppShareDeckElement: {
        prototype: HTMLAppShareDeckElement;
        new (): HTMLAppShareDeckElement;
    };
    interface HTMLAppShareOptionsElement extends Components.AppShareOptions, HTMLStencilElement {
    }
    var HTMLAppShareOptionsElement: {
        prototype: HTMLAppShareOptionsElement;
        new (): HTMLAppShareOptionsElement;
    };
    interface HTMLAppSigninElement extends Components.AppSignin, HTMLStencilElement {
    }
    var HTMLAppSigninElement: {
        prototype: HTMLAppSigninElement;
        new (): HTMLAppSigninElement;
    };
    interface HTMLAppSigninPageElement extends Components.AppSigninPage, HTMLStencilElement {
    }
    var HTMLAppSigninPageElement: {
        prototype: HTMLAppSigninPageElement;
        new (): HTMLAppSigninPageElement;
    };
    interface HTMLAppSlideNavigateElement extends Components.AppSlideNavigate, HTMLStencilElement {
    }
    var HTMLAppSlideNavigateElement: {
        prototype: HTMLAppSlideNavigateElement;
        new (): HTMLAppSlideNavigateElement;
    };
    interface HTMLAppSlidePreviewElement extends Components.AppSlidePreview, HTMLStencilElement {
    }
    var HTMLAppSlidePreviewElement: {
        prototype: HTMLAppSlidePreviewElement;
        new (): HTMLAppSlidePreviewElement;
    };
    interface HTMLAppSlideWarningElement extends Components.AppSlideWarning, HTMLStencilElement {
    }
    var HTMLAppSlideWarningElement: {
        prototype: HTMLAppSlideWarningElement;
        new (): HTMLAppSlideWarningElement;
    };
    interface HTMLAppSlideWarningInfoElement extends Components.AppSlideWarningInfo, HTMLStencilElement {
    }
    var HTMLAppSlideWarningInfoElement: {
        prototype: HTMLAppSlideWarningInfoElement;
        new (): HTMLAppSlideWarningInfoElement;
    };
    interface HTMLAppSlotTypeElement extends Components.AppSlotType, HTMLStencilElement {
    }
    var HTMLAppSlotTypeElement: {
        prototype: HTMLAppSlotTypeElement;
        new (): HTMLAppSlotTypeElement;
    };
    interface HTMLAppSpinnerElement extends Components.AppSpinner, HTMLStencilElement {
    }
    var HTMLAppSpinnerElement: {
        prototype: HTMLAppSpinnerElement;
        new (): HTMLAppSpinnerElement;
    };
    interface HTMLAppStartDeckElement extends Components.AppStartDeck, HTMLStencilElement {
    }
    var HTMLAppStartDeckElement: {
        prototype: HTMLAppStartDeckElement;
        new (): HTMLAppStartDeckElement;
    };
    interface HTMLAppTemplateElement extends Components.AppTemplate, HTMLStencilElement {
    }
    var HTMLAppTemplateElement: {
        prototype: HTMLAppTemplateElement;
        new (): HTMLAppTemplateElement;
    };
    interface HTMLAppTemplateShowcaseElement extends Components.AppTemplateShowcase, HTMLStencilElement {
    }
    var HTMLAppTemplateShowcaseElement: {
        prototype: HTMLAppTemplateShowcaseElement;
        new (): HTMLAppTemplateShowcaseElement;
    };
    interface HTMLAppTemplatesElement extends Components.AppTemplates, HTMLStencilElement {
    }
    var HTMLAppTemplatesElement: {
        prototype: HTMLAppTemplatesElement;
        new (): HTMLAppTemplatesElement;
    };
    interface HTMLAppTemplatesChartsElement extends Components.AppTemplatesCharts, HTMLStencilElement {
    }
    var HTMLAppTemplatesChartsElement: {
        prototype: HTMLAppTemplatesChartsElement;
        new (): HTMLAppTemplatesChartsElement;
    };
    interface HTMLAppTemplatesCommunityElement extends Components.AppTemplatesCommunity, HTMLStencilElement {
    }
    var HTMLAppTemplatesCommunityElement: {
        prototype: HTMLAppTemplatesCommunityElement;
        new (): HTMLAppTemplatesCommunityElement;
    };
    interface HTMLAppTemplatesContentElement extends Components.AppTemplatesContent, HTMLStencilElement {
    }
    var HTMLAppTemplatesContentElement: {
        prototype: HTMLAppTemplatesContentElement;
        new (): HTMLAppTemplatesContentElement;
    };
    interface HTMLAppTemplatesDefaultElement extends Components.AppTemplatesDefault, HTMLStencilElement {
    }
    var HTMLAppTemplatesDefaultElement: {
        prototype: HTMLAppTemplatesDefaultElement;
        new (): HTMLAppTemplatesDefaultElement;
    };
    interface HTMLAppTemplatesSplitElement extends Components.AppTemplatesSplit, HTMLStencilElement {
    }
    var HTMLAppTemplatesSplitElement: {
        prototype: HTMLAppTemplatesSplitElement;
        new (): HTMLAppTemplatesSplitElement;
    };
    interface HTMLAppTemplatesTitleElement extends Components.AppTemplatesTitle, HTMLStencilElement {
    }
    var HTMLAppTemplatesTitleElement: {
        prototype: HTMLAppTemplatesTitleElement;
        new (): HTMLAppTemplatesTitleElement;
    };
    interface HTMLAppTemplatesUserElement extends Components.AppTemplatesUser, HTMLStencilElement {
    }
    var HTMLAppTemplatesUserElement: {
        prototype: HTMLAppTemplatesUserElement;
        new (): HTMLAppTemplatesUserElement;
    };
    interface HTMLAppTextElement extends Components.AppText, HTMLStencilElement {
    }
    var HTMLAppTextElement: {
        prototype: HTMLAppTextElement;
        new (): HTMLAppTextElement;
    };
    interface HTMLAppTransformElementElement extends Components.AppTransformElement, HTMLStencilElement {
    }
    var HTMLAppTransformElementElement: {
        prototype: HTMLAppTransformElementElement;
        new (): HTMLAppTransformElementElement;
    };
    interface HTMLAppTransformSlideElement extends Components.AppTransformSlide, HTMLStencilElement {
    }
    var HTMLAppTransformSlideElement: {
        prototype: HTMLAppTransformSlideElement;
        new (): HTMLAppTransformSlideElement;
    };
    interface HTMLAppUnpublishElement extends Components.AppUnpublish, HTMLStencilElement {
    }
    var HTMLAppUnpublishElement: {
        prototype: HTMLAppUnpublishElement;
        new (): HTMLAppUnpublishElement;
    };
    interface HTMLAppUserDeleteElement extends Components.AppUserDelete, HTMLStencilElement {
    }
    var HTMLAppUserDeleteElement: {
        prototype: HTMLAppUserDeleteElement;
        new (): HTMLAppUserDeleteElement;
    };
    interface HTMLAppUserInfoElement extends Components.AppUserInfo, HTMLStencilElement {
    }
    var HTMLAppUserInfoElement: {
        prototype: HTMLAppUserInfoElement;
        new (): HTMLAppUserInfoElement;
    };
    interface HTMLAppUserMenuElement extends Components.AppUserMenu, HTMLStencilElement {
    }
    var HTMLAppUserMenuElement: {
        prototype: HTMLAppUserMenuElement;
        new (): HTMLAppUserMenuElement;
    };
    interface HTMLAppWavesElement extends Components.AppWaves, HTMLStencilElement {
    }
    var HTMLAppWavesElement: {
        prototype: HTMLAppWavesElement;
        new (): HTMLAppWavesElement;
    };
    interface HTMLAppYoutubeElement extends Components.AppYoutube, HTMLStencilElement {
    }
    var HTMLAppYoutubeElement: {
        prototype: HTMLAppYoutubeElement;
        new (): HTMLAppYoutubeElement;
    };
    interface HTMLElementTagNameMap {
        "app-action-add-slide": HTMLAppActionAddSlideElement;
        "app-action-busy": HTMLAppActionBusyElement;
        "app-action-help": HTMLAppActionHelpElement;
        "app-action-share": HTMLAppActionShareElement;
        "app-actions-deck": HTMLAppActionsDeckElement;
        "app-actions-editor": HTMLAppActionsEditorElement;
        "app-actions-element": HTMLAppActionsElementElement;
        "app-avatar": HTMLAppAvatarElement;
        "app-background-folders": HTMLAppBackgroundFoldersElement;
        "app-block": HTMLAppBlockElement;
        "app-border-radius": HTMLAppBorderRadiusElement;
        "app-bottom-sheet": HTMLAppBottomSheetElement;
        "app-box-shadow": HTMLAppBoxShadowElement;
        "app-breadcrumbs": HTMLAppBreadcrumbsElement;
        "app-close-menu": HTMLAppCloseMenuElement;
        "app-code": HTMLAppCodeElement;
        "app-code-languages": HTMLAppCodeLanguagesElement;
        "app-color": HTMLAppColorElement;
        "app-color-chart": HTMLAppColorChartElement;
        "app-color-code": HTMLAppColorCodeElement;
        "app-color-qrcode": HTMLAppColorQrcodeElement;
        "app-color-sides": HTMLAppColorSidesElement;
        "app-color-text-background": HTMLAppColorTextBackgroundElement;
        "app-color-word-cloud": HTMLAppColorWordCloudElement;
        "app-copy-style": HTMLAppCopyStyleElement;
        "app-create-slide": HTMLAppCreateSlideElement;
        "app-custom-data": HTMLAppCustomDataElement;
        "app-custom-images": HTMLAppCustomImagesElement;
        "app-customization": HTMLAppCustomizationElement;
        "app-dashboard": HTMLAppDashboardElement;
        "app-dashboard-deck-actions": HTMLAppDashboardDeckActionsElement;
        "app-dashboard-page": HTMLAppDashboardPageElement;
        "app-deck-delete": HTMLAppDeckDeleteElement;
        "app-deck-fonts": HTMLAppDeckFontsElement;
        "app-deck-header-footer": HTMLAppDeckHeaderFooterElement;
        "app-deck-import": HTMLAppDeckImportElement;
        "app-deck-style": HTMLAppDeckStyleElement;
        "app-deck-transition": HTMLAppDeckTransitionElement;
        "app-demo": HTMLAppDemoElement;
        "app-edit-mode": HTMLAppEditModeElement;
        "app-edit-slide": HTMLAppEditSlideElement;
        "app-edit-slide-author": HTMLAppEditSlideAuthorElement;
        "app-edit-slide-chart": HTMLAppEditSlideChartElement;
        "app-edit-slide-qrcode": HTMLAppEditSlideQrcodeElement;
        "app-edit-slide-user": HTMLAppEditSlideUserElement;
        "app-editor": HTMLAppEditorElement;
        "app-element-delete": HTMLAppElementDeleteElement;
        "app-element-style": HTMLAppElementStyleElement;
        "app-embed": HTMLAppEmbedElement;
        "app-expansion-panel": HTMLAppExpansionPanelElement;
        "app-fullscreen-info": HTMLAppFullscreenInfoElement;
        "app-get-help": HTMLAppGetHelpElement;
        "app-gif": HTMLAppGifElement;
        "app-go-offline": HTMLAppGoOfflineElement;
        "app-go-online": HTMLAppGoOnlineElement;
        "app-image": HTMLAppImageElement;
        "app-image-columns": HTMLAppImageColumnsElement;
        "app-image-element": HTMLAppImageElementElement;
        "app-image-style": HTMLAppImageStyleElement;
        "app-links": HTMLAppLinksElement;
        "app-list": HTMLAppListElement;
        "app-logo": HTMLAppLogoElement;
        "app-math": HTMLAppMathElement;
        "app-menu": HTMLAppMenuElement;
        "app-more-deck-actions": HTMLAppMoreDeckActionsElement;
        "app-more-element-actions": HTMLAppMoreElementActionsElement;
        "app-more-share-options": HTMLAppMoreShareOptionsElement;
        "app-navigation": HTMLAppNavigationElement;
        "app-navigation-actions": HTMLAppNavigationActionsElement;
        "app-no-templates": HTMLAppNoTemplatesElement;
        "app-notes": HTMLAppNotesElement;
        "app-offline": HTMLAppOfflineElement;
        "app-photo": HTMLAppPhotoElement;
        "app-playground": HTMLAppPlaygroundElement;
        "app-playground-placeholder": HTMLAppPlaygroundPlaceholderElement;
        "app-poll": HTMLAppPollElement;
        "app-poll-options": HTMLAppPollOptionsElement;
        "app-present": HTMLAppPresentElement;
        "app-profile": HTMLAppProfileElement;
        "app-publish": HTMLAppPublishElement;
        "app-publish-done": HTMLAppPublishDoneElement;
        "app-publish-edit": HTMLAppPublishEditElement;
        "app-publish-tags": HTMLAppPublishTagsElement;
        "app-random-gif": HTMLAppRandomGifElement;
        "app-remote-connect": HTMLAppRemoteConnectElement;
        "app-remote-request": HTMLAppRemoteRequestElement;
        "app-reveal": HTMLAppRevealElement;
        "app-root": HTMLAppRootElement;
        "app-select-target-element": HTMLAppSelectTargetElementElement;
        "app-shape": HTMLAppShapeElement;
        "app-share-deck": HTMLAppShareDeckElement;
        "app-share-options": HTMLAppShareOptionsElement;
        "app-signin": HTMLAppSigninElement;
        "app-signin-page": HTMLAppSigninPageElement;
        "app-slide-navigate": HTMLAppSlideNavigateElement;
        "app-slide-preview": HTMLAppSlidePreviewElement;
        "app-slide-warning": HTMLAppSlideWarningElement;
        "app-slide-warning-info": HTMLAppSlideWarningInfoElement;
        "app-slot-type": HTMLAppSlotTypeElement;
        "app-spinner": HTMLAppSpinnerElement;
        "app-start-deck": HTMLAppStartDeckElement;
        "app-template": HTMLAppTemplateElement;
        "app-template-showcase": HTMLAppTemplateShowcaseElement;
        "app-templates": HTMLAppTemplatesElement;
        "app-templates-charts": HTMLAppTemplatesChartsElement;
        "app-templates-community": HTMLAppTemplatesCommunityElement;
        "app-templates-content": HTMLAppTemplatesContentElement;
        "app-templates-default": HTMLAppTemplatesDefaultElement;
        "app-templates-split": HTMLAppTemplatesSplitElement;
        "app-templates-title": HTMLAppTemplatesTitleElement;
        "app-templates-user": HTMLAppTemplatesUserElement;
        "app-text": HTMLAppTextElement;
        "app-transform-element": HTMLAppTransformElementElement;
        "app-transform-slide": HTMLAppTransformSlideElement;
        "app-unpublish": HTMLAppUnpublishElement;
        "app-user-delete": HTMLAppUserDeleteElement;
        "app-user-info": HTMLAppUserInfoElement;
        "app-user-menu": HTMLAppUserMenuElement;
        "app-waves": HTMLAppWavesElement;
        "app-youtube": HTMLAppYoutubeElement;
    }
}
declare namespace LocalJSX {
    interface AppActionAddSlide {
        "addSlide"?: EventEmitter;
        "blockSlide"?: EventEmitter;
        "signIn"?: EventEmitter;
        "slides"?: JSX.IntrinsicElements[];
    }
    interface AppActionBusy {
        "iconSrc"?: string;
        "onActionReady"?: (event: CustomEvent<UIEvent>) => void;
    }
    interface AppActionHelp {
        "link"?: boolean;
        "onHelpSelected"?: (event: CustomEvent<void>) => void;
    }
    interface AppActionShare {
        "onActionPublish"?: (event: CustomEvent<void>) => void;
        "onOpenEmbed"?: (event: CustomEvent<void>) => void;
    }
    interface AppActionsDeck {
        "actionPublish"?: EventEmitter;
        "addSlide"?: EventEmitter;
        "animatePrevNextSlide"?: EventEmitter;
        "blockSlide"?: EventEmitter;
        "deckDidChange"?: EventEmitter;
        "fullscreen"?: boolean;
        "onSelectDeck"?: (event: CustomEvent<void>) => void;
        "signIn"?: EventEmitter;
        "slideTo"?: EventEmitter;
        "slides"?: JSX.IntrinsicElements[];
        "toggleFullScreen"?: EventEmitter;
    }
    interface AppActionsEditor {
        "fullscreen"?: boolean;
        "hideActions"?: boolean;
        "onActionPublish"?: (event: CustomEvent<void>) => void;
        "onAddSlide"?: (event: CustomEvent<JSX.IntrinsicElements>) => void;
        "onAnimatePrevNextSlide"?: (event: CustomEvent<boolean>) => void;
        "onBlockSlide"?: (event: CustomEvent<boolean>) => void;
        "onDeckDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "onElementFocus"?: (event: CustomEvent<HTMLElement>) => void;
        "onPresenting"?: (event: CustomEvent<boolean>) => void;
        "onSignIn"?: (event: CustomEvent<void>) => void;
        "onSlideCopy"?: (event: CustomEvent<HTMLElement>) => void;
        "onSlideTo"?: (event: CustomEvent<number>) => void;
        "onSlideTransform"?: (event: CustomEvent<JSX.IntrinsicElements>) => void;
        "onToggleFullScreen"?: (event: CustomEvent<void>) => void;
        "slideNumber"?: number;
        "slides"?: JSX.IntrinsicElements[];
    }
    interface AppActionsElement {
        "elementFocus"?: EventEmitter;
        "onBlockSlide"?: (event: CustomEvent<boolean>) => void;
        "onCodeDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "onImgDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "onMathDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "onNotesDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "onResetted"?: (event: CustomEvent<void>) => void;
        "onSignIn"?: (event: CustomEvent<void>) => void;
        "onSlideDelete"?: (event: CustomEvent<HTMLElement>) => void;
        "onSlideDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "slideCopy"?: EventEmitter;
        "slideTransform"?: EventEmitter;
    }
    interface AppAvatar {
        "ariaLabel"?: string;
        "src"?: string;
    }
    interface AppBackgroundFolders {
        "onSelectFolder"?: (event: CustomEvent<string>) => void;
    }
    interface AppBlock {
        "onBlockChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: SelectedElement;
    }
    interface AppBorderRadius {
        "onBorderRadiusDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: SelectedElement;
    }
    interface AppBottomSheet {
        "onSheetChanged"?: (event: CustomEvent<'open' | 'close'>) => void;
    }
    interface AppBoxShadow {
        "onBoxShadowDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: SelectedElement;
    }
    interface AppBreadcrumbs {
        "onStepTo"?: (event: CustomEvent<HTMLElement | undefined>) => void;
        "slideNumber"?: number;
    }
    interface AppCloseMenu {
        "onClose"?: (event: CustomEvent<void>) => void;
    }
    interface AppCode {
        "codeDidChange"?: EventEmitter<HTMLElement>;
        "selectedElement"?: HTMLElement;
    }
    interface AppCodeLanguages {
        "codeDidChange"?: EventEmitter<HTMLElement>;
        "currentLanguage"?: PrismLanguage | undefined;
        "selectedElement"?: HTMLElement;
    }
    interface AppColor {
        "defaultColor"?: string;
        "initColor"?: () => Promise<InitStyleColor>;
        "onColorDidChange"?: (event: CustomEvent<string>) => void;
        "onResetColor"?: (event: CustomEvent<void>) => void;
    }
    interface AppColorChart {
        "onColorChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppColorCode {
        "onCodeDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppColorQrcode {
        "onColorChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppColorSides {
        "onColorChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
        "template"?: 'split' | 'author';
    }
    interface AppColorTextBackground {
        "colorType"?: 'text' | 'background';
        "deck"?: boolean;
        "onColorChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
        "slide"?: boolean;
    }
    interface AppColorWordCloud {
        "onWordCloudDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppCopyStyle {
        "selectedElement"?: HTMLElement;
    }
    interface AppCreateSlide {
        "onSignIn"?: (event: CustomEvent<void>) => void;
    }
    interface AppCustomData {
    }
    interface AppCustomImages {
    }
    interface AppCustomization {
    }
    interface AppDashboard {
    }
    interface AppDashboardDeckActions {
        "deck"?: Deck;
        "onDeckCloned"?: (event: CustomEvent<DeckDashboardCloneResult>) => void;
        "onDeckDeleted"?: (event: CustomEvent<string>) => void;
    }
    interface AppDashboardPage {
    }
    interface AppDeckDelete {
        "deckName"?: string;
        "published"?: string;
    }
    interface AppDeckFonts {
        "deckElement"?: HTMLElement;
        "onFontsChange"?: (event: CustomEvent<void>) => void;
    }
    interface AppDeckHeaderFooter {
        "deckDidChange"?: EventEmitter<HTMLElement>;
        "deckElement"?: HTMLElement;
        "onNavigateSettings"?: (event: CustomEvent<void>) => void;
        "onNavigateSignIn"?: (event: CustomEvent<void>) => void;
    }
    interface AppDeckImport {
    }
    interface AppDeckStyle {
        "blockSlide"?: EventEmitter<boolean>;
        "deckDidChange"?: EventEmitter<HTMLElement>;
        "signIn"?: EventEmitter<void>;
    }
    interface AppDeckTransition {
        "deckElement"?: HTMLDeckgoDeckElement;
        "onDeckNeedChange"?: (event: CustomEvent<DeckAction>) => void;
    }
    interface AppDemo {
        "selectedElement"?: HTMLElement;
    }
    interface AppEditMode {
    }
    interface AppEditSlide {
        "selectedElement"?: SelectedElement;
        "slideDidChange"?: EventEmitter<HTMLElement>;
    }
    interface AppEditSlideAuthor {
        "selectedElement"?: HTMLElement;
        "slideDidChange"?: EventEmitter<HTMLElement>;
    }
    interface AppEditSlideChart {
        "onAction"?: (event: CustomEvent<EditAction>) => void;
        "selectedElement"?: HTMLElement;
        "slideDidChange"?: EventEmitter<HTMLElement>;
    }
    interface AppEditSlideQrcode {
        "onAction"?: (event: CustomEvent<EditAction>) => void;
        "selectedElement"?: HTMLElement;
        "slideDidChange"?: EventEmitter<HTMLElement>;
    }
    interface AppEditSlideUser {
        "selectedElement"?: SelectedElement;
        "slideDidChange"?: EventEmitter<HTMLElement>;
    }
    interface AppEditor {
        "deckId"?: string;
    }
    interface AppElementDelete {
    }
    interface AppElementStyle {
        "imageHelper"?: ImageHelper;
        "imgDidChange"?: EventEmitter<HTMLElement>;
        "onOptionsDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: SelectedElement;
    }
    interface AppEmbed {
    }
    interface AppExpansionPanel {
        "expanded"?: Expanded;
        "expander"?: boolean;
        "onExpansion"?: (event: CustomEvent<Expanded>) => void;
    }
    interface AppFullscreenInfo {
    }
    interface AppGetHelp {
    }
    interface AppGif {
    }
    interface AppGoOffline {
        "onDoneOffline"?: (event: CustomEvent<void>) => void;
        "onInProgress"?: (event: CustomEvent<boolean>) => void;
    }
    interface AppGoOnline {
        "onDoneOnline"?: (event: CustomEvent<void>) => void;
        "onInProgress"?: (event: CustomEvent<boolean>) => void;
    }
    interface AppImage {
        "deck"?: boolean;
        "deleteBackground"?: boolean;
        "onAction"?: (event: CustomEvent<ImageAction>) => void;
        "selectedElement"?: HTMLElement;
        "slide"?: boolean;
    }
    interface AppImageColumns {
        "imagesEven"?: (UnsplashPhoto | TenorGif | StorageFile | Waves)[];
        "imagesOdd"?: (UnsplashPhoto | TenorGif | StorageFile | Waves)[];
        "onSelectImage"?: (event: CustomEvent<UnsplashPhoto | TenorGif | StorageFile | Waves>) => void;
    }
    interface AppImageElement {
        "selectedElement"?: HTMLElement;
        "slide"?: boolean;
    }
    interface AppImageStyle {
        "onImgDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppLinks {
    }
    interface AppList {
        "onListStyleChanged"?: (event: CustomEvent<ListStyle>) => void;
        "onToggleList"?: (event: CustomEvent<SlotType.OL | SlotType.UL>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppLogo {
    }
    interface AppMath {
        "mathDidChange"?: EventEmitter<HTMLElement>;
        "selectedElement"?: HTMLElement;
    }
    interface AppMenu {
    }
    interface AppMoreDeckActions {
        "offline"?: boolean;
    }
    interface AppMoreElementActions {
        "clone"?: boolean;
        "images"?: boolean;
        "notes"?: boolean;
        "transform"?: boolean;
    }
    interface AppMoreShareOptions {
    }
    interface AppNavigation {
        "menuToggle"?: boolean;
        "publish"?: boolean;
        "user"?: boolean;
        "write"?: boolean;
    }
    interface AppNavigationActions {
        "onActionPublish"?: (event: CustomEvent<void>) => void;
        "publish"?: boolean;
        "signIn"?: boolean;
        "write"?: boolean;
    }
    interface AppNoTemplates {
    }
    interface AppNotes {
        "selectedElement"?: HTMLElement;
    }
    interface AppOffline {
        "offline"?: boolean;
    }
    interface AppPhoto {
    }
    interface AppPlayground {
        "selectedElement"?: HTMLElement;
    }
    interface AppPlaygroundPlaceholder {
    }
    interface AppPoll {
        "pollKey"?: string;
    }
    interface AppPollOptions {
        "selectedElement"?: HTMLElement;
        "slideDidChange"?: EventEmitter<HTMLElement>;
    }
    interface AppPresent {
        "fullscreen"?: boolean;
        "onToggleFullScreen"?: (event: CustomEvent<void>) => void;
    }
    interface AppProfile {
    }
    interface AppPublish {
    }
    interface AppPublishDone {
        "publishedUrl"?: string;
    }
    interface AppPublishEdit {
        "onPublished"?: (event: CustomEvent<string>) => void;
    }
    interface AppPublishTags {
        "disableRemove"?: boolean;
        "onRemoveTag"?: (event: CustomEvent<string>) => void;
        "tags"?: string[];
    }
    interface AppRandomGif {
        "keyword"?: string;
    }
    interface AppRemoteConnect {
    }
    interface AppRemoteRequest {
    }
    interface AppReveal {
        "onToggleReveal"?: (event: CustomEvent<boolean>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppRoot {
    }
    interface AppSelectTargetElement {
        "chart"?: boolean;
        "code"?: boolean;
        "headerFooter"?: boolean;
        "image"?: boolean;
        "onApplyTo"?: (event: CustomEvent<TargetElement>) => void;
        "qrCode"?: boolean;
        "sides"?: boolean;
        "slide"?: boolean;
        "textTarget"?: boolean;
        "transition"?: boolean;
        "wordCloud"?: boolean;
    }
    interface AppShape {
        "selectedElement"?: HTMLElement;
    }
    interface AppShareDeck {
    }
    interface AppShareOptions {
        "onSelectedOption"?: (event: CustomEvent<MoreAction>) => void;
    }
    interface AppSignin {
        "redirect"?: string;
        "redirectId"?: string;
    }
    interface AppSigninPage {
        "redirect"?: string;
        "redirectId"?: string;
    }
    interface AppSlideNavigate {
        "onReorder"?: (event: CustomEvent<ItemReorderEventDetail>) => void;
    }
    interface AppSlidePreview {
        "deckRef": HTMLDeckgoDeckElement;
        "onPreviewAttached"?: (event: CustomEvent<void>) => void;
    }
    interface AppSlideWarning {
    }
    interface AppSlideWarningInfo {
        "lowContrast"?: boolean;
        "overflow"?: boolean;
    }
    interface AppSlotType {
        "onSelectType"?: (event: CustomEvent<SlotType | null>) => void;
        "selectedElement"?: HTMLElement;
        "skip"?: boolean;
        "slotTypes"?: SlotType[] | undefined;
    }
    interface AppSpinner {
    }
    interface AppStartDeck {
        "importColor"?: 'dark' | 'light';
        "writeColor"?: 'primary' | 'dark' | 'light';
    }
    interface AppTemplate {
        "template"?: Template | undefined;
    }
    interface AppTemplateShowcase {
        "author"?: boolean;
        "editable"?: boolean;
        "template"?: Template;
    }
    interface AppTemplates {
    }
    interface AppTemplatesCharts {
        "onSelectedTemplate"?: (event: CustomEvent<{template: SlideTemplate; attributes: SlideAttributes}>) => void;
    }
    interface AppTemplatesCommunity {
        "onSelectedTemplate"?: (event: CustomEvent<Template>) => void;
    }
    interface AppTemplatesContent {
        "highlight"?: boolean;
        "highlightIndex"?: number | undefined;
        "selected"?: boolean;
    }
    interface AppTemplatesDefault {
        "onAddSlideAspectRatio"?: (event: CustomEvent<void>) => void;
        "onAddSlideAuthor"?: (event: CustomEvent<void>) => void;
        "onAddSlideQRCode"?: (event: CustomEvent<void>) => void;
        "onComposeTemplate"?: (event: CustomEvent<InitTemplate>) => void;
        "onSelectCharts"?: (event: CustomEvent<void>) => void;
        "onSelectedTemplate"?: (event: CustomEvent<{template: SlideTemplate | Template; attributes?: SlideAttributes}>) => void;
    }
    interface AppTemplatesSplit {
        "highlight"?: boolean;
        "highlightIndex"?: number | undefined;
        "selected"?: boolean;
        "vertical"?: boolean;
    }
    interface AppTemplatesTitle {
        "highlight"?: boolean;
        "highlightIndex"?: number | undefined;
        "selected"?: boolean;
    }
    interface AppTemplatesUser {
        "onNavigateSignIn"?: (event: CustomEvent<void>) => void;
        "onSelectedTemplate"?: (event: CustomEvent<Template>) => void;
    }
    interface AppText {
        "onTextDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: SelectedElement;
    }
    interface AppTransformElement {
        "selectedElement"?: HTMLElement;
    }
    interface AppTransformSlide {
        "selectedElement"?: HTMLElement;
    }
    interface AppUnpublish {
    }
    interface AppUserDelete {
        "username"?: string;
    }
    interface AppUserInfo {
        "displayAvatar"?: boolean;
    }
    interface AppUserMenu {
    }
    interface AppWaves {
    }
    interface AppYoutube {
        "selectedElement"?: HTMLElement;
    }
    interface IntrinsicElements {
        "app-action-add-slide": AppActionAddSlide;
        "app-action-busy": AppActionBusy;
        "app-action-help": AppActionHelp;
        "app-action-share": AppActionShare;
        "app-actions-deck": AppActionsDeck;
        "app-actions-editor": AppActionsEditor;
        "app-actions-element": AppActionsElement;
        "app-avatar": AppAvatar;
        "app-background-folders": AppBackgroundFolders;
        "app-block": AppBlock;
        "app-border-radius": AppBorderRadius;
        "app-bottom-sheet": AppBottomSheet;
        "app-box-shadow": AppBoxShadow;
        "app-breadcrumbs": AppBreadcrumbs;
        "app-close-menu": AppCloseMenu;
        "app-code": AppCode;
        "app-code-languages": AppCodeLanguages;
        "app-color": AppColor;
        "app-color-chart": AppColorChart;
        "app-color-code": AppColorCode;
        "app-color-qrcode": AppColorQrcode;
        "app-color-sides": AppColorSides;
        "app-color-text-background": AppColorTextBackground;
        "app-color-word-cloud": AppColorWordCloud;
        "app-copy-style": AppCopyStyle;
        "app-create-slide": AppCreateSlide;
        "app-custom-data": AppCustomData;
        "app-custom-images": AppCustomImages;
        "app-customization": AppCustomization;
        "app-dashboard": AppDashboard;
        "app-dashboard-deck-actions": AppDashboardDeckActions;
        "app-dashboard-page": AppDashboardPage;
        "app-deck-delete": AppDeckDelete;
        "app-deck-fonts": AppDeckFonts;
        "app-deck-header-footer": AppDeckHeaderFooter;
        "app-deck-import": AppDeckImport;
        "app-deck-style": AppDeckStyle;
        "app-deck-transition": AppDeckTransition;
        "app-demo": AppDemo;
        "app-edit-mode": AppEditMode;
        "app-edit-slide": AppEditSlide;
        "app-edit-slide-author": AppEditSlideAuthor;
        "app-edit-slide-chart": AppEditSlideChart;
        "app-edit-slide-qrcode": AppEditSlideQrcode;
        "app-edit-slide-user": AppEditSlideUser;
        "app-editor": AppEditor;
        "app-element-delete": AppElementDelete;
        "app-element-style": AppElementStyle;
        "app-embed": AppEmbed;
        "app-expansion-panel": AppExpansionPanel;
        "app-fullscreen-info": AppFullscreenInfo;
        "app-get-help": AppGetHelp;
        "app-gif": AppGif;
        "app-go-offline": AppGoOffline;
        "app-go-online": AppGoOnline;
        "app-image": AppImage;
        "app-image-columns": AppImageColumns;
        "app-image-element": AppImageElement;
        "app-image-style": AppImageStyle;
        "app-links": AppLinks;
        "app-list": AppList;
        "app-logo": AppLogo;
        "app-math": AppMath;
        "app-menu": AppMenu;
        "app-more-deck-actions": AppMoreDeckActions;
        "app-more-element-actions": AppMoreElementActions;
        "app-more-share-options": AppMoreShareOptions;
        "app-navigation": AppNavigation;
        "app-navigation-actions": AppNavigationActions;
        "app-no-templates": AppNoTemplates;
        "app-notes": AppNotes;
        "app-offline": AppOffline;
        "app-photo": AppPhoto;
        "app-playground": AppPlayground;
        "app-playground-placeholder": AppPlaygroundPlaceholder;
        "app-poll": AppPoll;
        "app-poll-options": AppPollOptions;
        "app-present": AppPresent;
        "app-profile": AppProfile;
        "app-publish": AppPublish;
        "app-publish-done": AppPublishDone;
        "app-publish-edit": AppPublishEdit;
        "app-publish-tags": AppPublishTags;
        "app-random-gif": AppRandomGif;
        "app-remote-connect": AppRemoteConnect;
        "app-remote-request": AppRemoteRequest;
        "app-reveal": AppReveal;
        "app-root": AppRoot;
        "app-select-target-element": AppSelectTargetElement;
        "app-shape": AppShape;
        "app-share-deck": AppShareDeck;
        "app-share-options": AppShareOptions;
        "app-signin": AppSignin;
        "app-signin-page": AppSigninPage;
        "app-slide-navigate": AppSlideNavigate;
        "app-slide-preview": AppSlidePreview;
        "app-slide-warning": AppSlideWarning;
        "app-slide-warning-info": AppSlideWarningInfo;
        "app-slot-type": AppSlotType;
        "app-spinner": AppSpinner;
        "app-start-deck": AppStartDeck;
        "app-template": AppTemplate;
        "app-template-showcase": AppTemplateShowcase;
        "app-templates": AppTemplates;
        "app-templates-charts": AppTemplatesCharts;
        "app-templates-community": AppTemplatesCommunity;
        "app-templates-content": AppTemplatesContent;
        "app-templates-default": AppTemplatesDefault;
        "app-templates-split": AppTemplatesSplit;
        "app-templates-title": AppTemplatesTitle;
        "app-templates-user": AppTemplatesUser;
        "app-text": AppText;
        "app-transform-element": AppTransformElement;
        "app-transform-slide": AppTransformSlide;
        "app-unpublish": AppUnpublish;
        "app-user-delete": AppUserDelete;
        "app-user-info": AppUserInfo;
        "app-user-menu": AppUserMenu;
        "app-waves": AppWaves;
        "app-youtube": AppYoutube;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-action-add-slide": LocalJSX.AppActionAddSlide & JSXBase.HTMLAttributes<HTMLAppActionAddSlideElement>;
            "app-action-busy": LocalJSX.AppActionBusy & JSXBase.HTMLAttributes<HTMLAppActionBusyElement>;
            "app-action-help": LocalJSX.AppActionHelp & JSXBase.HTMLAttributes<HTMLAppActionHelpElement>;
            "app-action-share": LocalJSX.AppActionShare & JSXBase.HTMLAttributes<HTMLAppActionShareElement>;
            "app-actions-deck": LocalJSX.AppActionsDeck & JSXBase.HTMLAttributes<HTMLAppActionsDeckElement>;
            "app-actions-editor": LocalJSX.AppActionsEditor & JSXBase.HTMLAttributes<HTMLAppActionsEditorElement>;
            "app-actions-element": LocalJSX.AppActionsElement & JSXBase.HTMLAttributes<HTMLAppActionsElementElement>;
            "app-avatar": LocalJSX.AppAvatar & JSXBase.HTMLAttributes<HTMLAppAvatarElement>;
            "app-background-folders": LocalJSX.AppBackgroundFolders & JSXBase.HTMLAttributes<HTMLAppBackgroundFoldersElement>;
            "app-block": LocalJSX.AppBlock & JSXBase.HTMLAttributes<HTMLAppBlockElement>;
            "app-border-radius": LocalJSX.AppBorderRadius & JSXBase.HTMLAttributes<HTMLAppBorderRadiusElement>;
            "app-bottom-sheet": LocalJSX.AppBottomSheet & JSXBase.HTMLAttributes<HTMLAppBottomSheetElement>;
            "app-box-shadow": LocalJSX.AppBoxShadow & JSXBase.HTMLAttributes<HTMLAppBoxShadowElement>;
            "app-breadcrumbs": LocalJSX.AppBreadcrumbs & JSXBase.HTMLAttributes<HTMLAppBreadcrumbsElement>;
            "app-close-menu": LocalJSX.AppCloseMenu & JSXBase.HTMLAttributes<HTMLAppCloseMenuElement>;
            "app-code": LocalJSX.AppCode & JSXBase.HTMLAttributes<HTMLAppCodeElement>;
            "app-code-languages": LocalJSX.AppCodeLanguages & JSXBase.HTMLAttributes<HTMLAppCodeLanguagesElement>;
            "app-color": LocalJSX.AppColor & JSXBase.HTMLAttributes<HTMLAppColorElement>;
            "app-color-chart": LocalJSX.AppColorChart & JSXBase.HTMLAttributes<HTMLAppColorChartElement>;
            "app-color-code": LocalJSX.AppColorCode & JSXBase.HTMLAttributes<HTMLAppColorCodeElement>;
            "app-color-qrcode": LocalJSX.AppColorQrcode & JSXBase.HTMLAttributes<HTMLAppColorQrcodeElement>;
            "app-color-sides": LocalJSX.AppColorSides & JSXBase.HTMLAttributes<HTMLAppColorSidesElement>;
            "app-color-text-background": LocalJSX.AppColorTextBackground & JSXBase.HTMLAttributes<HTMLAppColorTextBackgroundElement>;
            "app-color-word-cloud": LocalJSX.AppColorWordCloud & JSXBase.HTMLAttributes<HTMLAppColorWordCloudElement>;
            "app-copy-style": LocalJSX.AppCopyStyle & JSXBase.HTMLAttributes<HTMLAppCopyStyleElement>;
            "app-create-slide": LocalJSX.AppCreateSlide & JSXBase.HTMLAttributes<HTMLAppCreateSlideElement>;
            "app-custom-data": LocalJSX.AppCustomData & JSXBase.HTMLAttributes<HTMLAppCustomDataElement>;
            "app-custom-images": LocalJSX.AppCustomImages & JSXBase.HTMLAttributes<HTMLAppCustomImagesElement>;
            "app-customization": LocalJSX.AppCustomization & JSXBase.HTMLAttributes<HTMLAppCustomizationElement>;
            "app-dashboard": LocalJSX.AppDashboard & JSXBase.HTMLAttributes<HTMLAppDashboardElement>;
            "app-dashboard-deck-actions": LocalJSX.AppDashboardDeckActions & JSXBase.HTMLAttributes<HTMLAppDashboardDeckActionsElement>;
            "app-dashboard-page": LocalJSX.AppDashboardPage & JSXBase.HTMLAttributes<HTMLAppDashboardPageElement>;
            "app-deck-delete": LocalJSX.AppDeckDelete & JSXBase.HTMLAttributes<HTMLAppDeckDeleteElement>;
            "app-deck-fonts": LocalJSX.AppDeckFonts & JSXBase.HTMLAttributes<HTMLAppDeckFontsElement>;
            "app-deck-header-footer": LocalJSX.AppDeckHeaderFooter & JSXBase.HTMLAttributes<HTMLAppDeckHeaderFooterElement>;
            "app-deck-import": LocalJSX.AppDeckImport & JSXBase.HTMLAttributes<HTMLAppDeckImportElement>;
            "app-deck-style": LocalJSX.AppDeckStyle & JSXBase.HTMLAttributes<HTMLAppDeckStyleElement>;
            "app-deck-transition": LocalJSX.AppDeckTransition & JSXBase.HTMLAttributes<HTMLAppDeckTransitionElement>;
            "app-demo": LocalJSX.AppDemo & JSXBase.HTMLAttributes<HTMLAppDemoElement>;
            "app-edit-mode": LocalJSX.AppEditMode & JSXBase.HTMLAttributes<HTMLAppEditModeElement>;
            "app-edit-slide": LocalJSX.AppEditSlide & JSXBase.HTMLAttributes<HTMLAppEditSlideElement>;
            "app-edit-slide-author": LocalJSX.AppEditSlideAuthor & JSXBase.HTMLAttributes<HTMLAppEditSlideAuthorElement>;
            "app-edit-slide-chart": LocalJSX.AppEditSlideChart & JSXBase.HTMLAttributes<HTMLAppEditSlideChartElement>;
            "app-edit-slide-qrcode": LocalJSX.AppEditSlideQrcode & JSXBase.HTMLAttributes<HTMLAppEditSlideQrcodeElement>;
            "app-edit-slide-user": LocalJSX.AppEditSlideUser & JSXBase.HTMLAttributes<HTMLAppEditSlideUserElement>;
            "app-editor": LocalJSX.AppEditor & JSXBase.HTMLAttributes<HTMLAppEditorElement>;
            "app-element-delete": LocalJSX.AppElementDelete & JSXBase.HTMLAttributes<HTMLAppElementDeleteElement>;
            "app-element-style": LocalJSX.AppElementStyle & JSXBase.HTMLAttributes<HTMLAppElementStyleElement>;
            "app-embed": LocalJSX.AppEmbed & JSXBase.HTMLAttributes<HTMLAppEmbedElement>;
            "app-expansion-panel": LocalJSX.AppExpansionPanel & JSXBase.HTMLAttributes<HTMLAppExpansionPanelElement>;
            "app-fullscreen-info": LocalJSX.AppFullscreenInfo & JSXBase.HTMLAttributes<HTMLAppFullscreenInfoElement>;
            "app-get-help": LocalJSX.AppGetHelp & JSXBase.HTMLAttributes<HTMLAppGetHelpElement>;
            "app-gif": LocalJSX.AppGif & JSXBase.HTMLAttributes<HTMLAppGifElement>;
            "app-go-offline": LocalJSX.AppGoOffline & JSXBase.HTMLAttributes<HTMLAppGoOfflineElement>;
            "app-go-online": LocalJSX.AppGoOnline & JSXBase.HTMLAttributes<HTMLAppGoOnlineElement>;
            "app-image": LocalJSX.AppImage & JSXBase.HTMLAttributes<HTMLAppImageElement>;
            "app-image-columns": LocalJSX.AppImageColumns & JSXBase.HTMLAttributes<HTMLAppImageColumnsElement>;
            "app-image-element": LocalJSX.AppImageElement & JSXBase.HTMLAttributes<HTMLAppImageElementElement>;
            "app-image-style": LocalJSX.AppImageStyle & JSXBase.HTMLAttributes<HTMLAppImageStyleElement>;
            "app-links": LocalJSX.AppLinks & JSXBase.HTMLAttributes<HTMLAppLinksElement>;
            "app-list": LocalJSX.AppList & JSXBase.HTMLAttributes<HTMLAppListElement>;
            "app-logo": LocalJSX.AppLogo & JSXBase.HTMLAttributes<HTMLAppLogoElement>;
            "app-math": LocalJSX.AppMath & JSXBase.HTMLAttributes<HTMLAppMathElement>;
            "app-menu": LocalJSX.AppMenu & JSXBase.HTMLAttributes<HTMLAppMenuElement>;
            "app-more-deck-actions": LocalJSX.AppMoreDeckActions & JSXBase.HTMLAttributes<HTMLAppMoreDeckActionsElement>;
            "app-more-element-actions": LocalJSX.AppMoreElementActions & JSXBase.HTMLAttributes<HTMLAppMoreElementActionsElement>;
            "app-more-share-options": LocalJSX.AppMoreShareOptions & JSXBase.HTMLAttributes<HTMLAppMoreShareOptionsElement>;
            "app-navigation": LocalJSX.AppNavigation & JSXBase.HTMLAttributes<HTMLAppNavigationElement>;
            "app-navigation-actions": LocalJSX.AppNavigationActions & JSXBase.HTMLAttributes<HTMLAppNavigationActionsElement>;
            "app-no-templates": LocalJSX.AppNoTemplates & JSXBase.HTMLAttributes<HTMLAppNoTemplatesElement>;
            "app-notes": LocalJSX.AppNotes & JSXBase.HTMLAttributes<HTMLAppNotesElement>;
            "app-offline": LocalJSX.AppOffline & JSXBase.HTMLAttributes<HTMLAppOfflineElement>;
            "app-photo": LocalJSX.AppPhoto & JSXBase.HTMLAttributes<HTMLAppPhotoElement>;
            "app-playground": LocalJSX.AppPlayground & JSXBase.HTMLAttributes<HTMLAppPlaygroundElement>;
            "app-playground-placeholder": LocalJSX.AppPlaygroundPlaceholder & JSXBase.HTMLAttributes<HTMLAppPlaygroundPlaceholderElement>;
            "app-poll": LocalJSX.AppPoll & JSXBase.HTMLAttributes<HTMLAppPollElement>;
            "app-poll-options": LocalJSX.AppPollOptions & JSXBase.HTMLAttributes<HTMLAppPollOptionsElement>;
            "app-present": LocalJSX.AppPresent & JSXBase.HTMLAttributes<HTMLAppPresentElement>;
            "app-profile": LocalJSX.AppProfile & JSXBase.HTMLAttributes<HTMLAppProfileElement>;
            "app-publish": LocalJSX.AppPublish & JSXBase.HTMLAttributes<HTMLAppPublishElement>;
            "app-publish-done": LocalJSX.AppPublishDone & JSXBase.HTMLAttributes<HTMLAppPublishDoneElement>;
            "app-publish-edit": LocalJSX.AppPublishEdit & JSXBase.HTMLAttributes<HTMLAppPublishEditElement>;
            "app-publish-tags": LocalJSX.AppPublishTags & JSXBase.HTMLAttributes<HTMLAppPublishTagsElement>;
            "app-random-gif": LocalJSX.AppRandomGif & JSXBase.HTMLAttributes<HTMLAppRandomGifElement>;
            "app-remote-connect": LocalJSX.AppRemoteConnect & JSXBase.HTMLAttributes<HTMLAppRemoteConnectElement>;
            "app-remote-request": LocalJSX.AppRemoteRequest & JSXBase.HTMLAttributes<HTMLAppRemoteRequestElement>;
            "app-reveal": LocalJSX.AppReveal & JSXBase.HTMLAttributes<HTMLAppRevealElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "app-select-target-element": LocalJSX.AppSelectTargetElement & JSXBase.HTMLAttributes<HTMLAppSelectTargetElementElement>;
            "app-shape": LocalJSX.AppShape & JSXBase.HTMLAttributes<HTMLAppShapeElement>;
            "app-share-deck": LocalJSX.AppShareDeck & JSXBase.HTMLAttributes<HTMLAppShareDeckElement>;
            "app-share-options": LocalJSX.AppShareOptions & JSXBase.HTMLAttributes<HTMLAppShareOptionsElement>;
            "app-signin": LocalJSX.AppSignin & JSXBase.HTMLAttributes<HTMLAppSigninElement>;
            "app-signin-page": LocalJSX.AppSigninPage & JSXBase.HTMLAttributes<HTMLAppSigninPageElement>;
            "app-slide-navigate": LocalJSX.AppSlideNavigate & JSXBase.HTMLAttributes<HTMLAppSlideNavigateElement>;
            "app-slide-preview": LocalJSX.AppSlidePreview & JSXBase.HTMLAttributes<HTMLAppSlidePreviewElement>;
            "app-slide-warning": LocalJSX.AppSlideWarning & JSXBase.HTMLAttributes<HTMLAppSlideWarningElement>;
            "app-slide-warning-info": LocalJSX.AppSlideWarningInfo & JSXBase.HTMLAttributes<HTMLAppSlideWarningInfoElement>;
            "app-slot-type": LocalJSX.AppSlotType & JSXBase.HTMLAttributes<HTMLAppSlotTypeElement>;
            "app-spinner": LocalJSX.AppSpinner & JSXBase.HTMLAttributes<HTMLAppSpinnerElement>;
            "app-start-deck": LocalJSX.AppStartDeck & JSXBase.HTMLAttributes<HTMLAppStartDeckElement>;
            "app-template": LocalJSX.AppTemplate & JSXBase.HTMLAttributes<HTMLAppTemplateElement>;
            "app-template-showcase": LocalJSX.AppTemplateShowcase & JSXBase.HTMLAttributes<HTMLAppTemplateShowcaseElement>;
            "app-templates": LocalJSX.AppTemplates & JSXBase.HTMLAttributes<HTMLAppTemplatesElement>;
            "app-templates-charts": LocalJSX.AppTemplatesCharts & JSXBase.HTMLAttributes<HTMLAppTemplatesChartsElement>;
            "app-templates-community": LocalJSX.AppTemplatesCommunity & JSXBase.HTMLAttributes<HTMLAppTemplatesCommunityElement>;
            "app-templates-content": LocalJSX.AppTemplatesContent & JSXBase.HTMLAttributes<HTMLAppTemplatesContentElement>;
            "app-templates-default": LocalJSX.AppTemplatesDefault & JSXBase.HTMLAttributes<HTMLAppTemplatesDefaultElement>;
            "app-templates-split": LocalJSX.AppTemplatesSplit & JSXBase.HTMLAttributes<HTMLAppTemplatesSplitElement>;
            "app-templates-title": LocalJSX.AppTemplatesTitle & JSXBase.HTMLAttributes<HTMLAppTemplatesTitleElement>;
            "app-templates-user": LocalJSX.AppTemplatesUser & JSXBase.HTMLAttributes<HTMLAppTemplatesUserElement>;
            "app-text": LocalJSX.AppText & JSXBase.HTMLAttributes<HTMLAppTextElement>;
            "app-transform-element": LocalJSX.AppTransformElement & JSXBase.HTMLAttributes<HTMLAppTransformElementElement>;
            "app-transform-slide": LocalJSX.AppTransformSlide & JSXBase.HTMLAttributes<HTMLAppTransformSlideElement>;
            "app-unpublish": LocalJSX.AppUnpublish & JSXBase.HTMLAttributes<HTMLAppUnpublishElement>;
            "app-user-delete": LocalJSX.AppUserDelete & JSXBase.HTMLAttributes<HTMLAppUserDeleteElement>;
            "app-user-info": LocalJSX.AppUserInfo & JSXBase.HTMLAttributes<HTMLAppUserInfoElement>;
            "app-user-menu": LocalJSX.AppUserMenu & JSXBase.HTMLAttributes<HTMLAppUserMenuElement>;
            "app-waves": LocalJSX.AppWaves & JSXBase.HTMLAttributes<HTMLAppWavesElement>;
            "app-youtube": LocalJSX.AppYoutube & JSXBase.HTMLAttributes<HTMLAppYoutubeElement>;
        }
    }
}
