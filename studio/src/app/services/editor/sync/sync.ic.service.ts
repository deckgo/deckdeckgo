import authStore from '../../../stores/auth.store';
import syncStore from '../../../stores/sync.store';

import {Deck} from '../../../models/data/deck';

import {SyncData, SyncDataDeck} from '../../../types/editor/sync';

import {idlFactory as DeckFactory} from '../../../functions/decks/decks.utils.did';
import {_SERVICE as DeckService} from '../../../functions/decks/decks.did';

import {internetComputer} from '../../../utils/core/environment.utils';
import {createActor} from '../../../utils/core/ic.utils';

import {SyncService} from './sync.service';

// TODO: can we move this in a web worker? the IC SDK is compatible?

export class SyncIcService extends SyncService {
  // @Override
  async upload(syncData: SyncData | undefined) {
    if (!syncData) {
      return;
    }

    if (!authStore.state.loggedIn || !navigator.onLine) {
      return;
    }

    if (!internetComputer()) {
      return;
    }

    syncStore.state.sync = 'in_progress';

    await this.uploadDecksIC(syncData);

    await this.clean(syncData);
  }

  private async clean({syncedAt}: SyncData) {
    await this.cleanPending(syncedAt);

    await this.updateSyncState();
  }

  private async uploadDecksIC({updateDecks}: SyncData) {
    if (!updateDecks || updateDecks.length <= 0) {
      return;
    }

    const deckActor: DeckService = await createActor<DeckService>({canisterId: process.env.DECKS_CANISTER_ID, idlFactory: DeckFactory});

    const promises: Promise<void>[] = updateDecks.map(({deck}: SyncDataDeck) => this.uploadDeckIC({deck, deckActor}));
    await Promise.all(promises);
  }

  private async uploadDeckIC({deck, deckActor}: {deck: Deck; deckActor: DeckService}) {
    if (!deck) {
      return;
    }

    // TODO: following can take ages

    // TODO: Locally error -> Fail to verify certificate - https://forum.dfinity.org/t/fail-to-verify-certificate-in-development-update-calls/4078/14

    await deckActor.set({
      id: deck.id,
      data: {
        name: deck.data.name,
        header: this.toNullString(deck.data.header)
      }
    });

    // TODO: remove, just for test
    console.log('Deck IC Get:', await deckActor.get(deck.id));
  }

  // TODO: typescript declaration not correctly generated by SDK -> https://forum.dfinity.org/t/fail-to-verify-certificate-in-development-update-calls/4078/14
  private toNullString(value?: string): [] | [string] {
    return value ? [value] : [];
  }
}
