type UserId = principal;
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: func () -> ();
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
 };
type StorageBucket = 
 service {
   commit_batch:
    (record {
       batchId: nat;
       chunkIds: vec nat;
       contentType: text;
     }) -> ();
   create_batch: (record {
                    path: text;
                    token: text;
                  }) -> (record {batchId: nat;});
   create_chunk: (Chunk) -> (record {chunkId: nat;});
   http_request: (HttpRequest) -> (HttpResponse) query;
   transferCycles: () -> ();
 };
type HttpResponse = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type Chunk = 
 record {
   batchId: nat;
   content: vec nat8;
 };
service : (UserId) -> StorageBucket
