type UserId = principal;
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: func () -> ();
                              token: StreamingCallbackToken__1;
                            };};
type StreamingCallbackToken__1 = 
 record {
   fullPath: text;
   headers: vec HeaderField;
   index: nat;
   sha256: opt vec nat8;
   token: opt text;
 };
type StreamingCallbackToken = 
 record {
   fullPath: text;
   headers: vec HeaderField;
   index: nat;
   sha256: opt vec nat8;
   token: opt text;
 };
type StreamingCallbackHttpResponse = 
 record {
   body: vec nat8;
   token: opt StreamingCallbackToken__1;
 };
type StorageBucket = 
 service {
   commitUpload:
    (record {
       batchId: nat;
       chunkIds: vec nat;
       headers: vec HeaderField__1;
     }) -> ();
   del: (record {
           fullPath: text;
           token: opt text;
         }) -> ();
   http_request: (HttpRequest) -> (HttpResponse) query;
   http_request_streaming_callback: (StreamingCallbackToken) ->
    (StreamingCallbackHttpResponse) query;
   initUpload: (AssetKey) -> (record {batchId: nat;});
   list: (opt text) -> (vec AssetKey) query;
   transferCycles: () -> ();
   uploadChunk: (Chunk) -> (record {chunkId: nat;});
 };
type HttpResponse = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField__1 = 
 record {
   text;
   text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type Chunk = 
 record {
   batchId: nat;
   content: vec nat8;
 };
type AssetKey = 
 record {
   folder: text;
   fullPath: text;
   name: text;
   token: opt text;
 };
service : (UserId) -> StorageBucket
