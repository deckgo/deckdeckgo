type UserId = principal;
type Time = int;
type DataFilter = 
 record {
   notContains: opt text;
   startsWith: opt text;
 };
type DataBucket = 
 service {
   del: (text) -> ();
   get: (text) -> (opt Data) query;
   list: (opt DataFilter) -> (vec record {
                                    text;
                                    Data;
                                  }) query;
   set: (text, Data) -> ();
   transferCycles: () -> ();
 };
type Data = 
 record {
   created_at: Time;
   data: blob;
   id: text;
   updated_at: Time;
 };
service : (UserId) -> DataBucket
